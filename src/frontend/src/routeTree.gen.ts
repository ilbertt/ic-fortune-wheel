/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as IndexImport } from './routes/index'
import { Route as authenticatedAdminImport } from './routes/(authenticated)/admin'
import { Route as unauthenticatedLoginIndexImport } from './routes/(unauthenticated)/login/index'
import { Route as unauthenticatedFwIndexImport } from './routes/(unauthenticated)/fw/index'
import { Route as authenticatedAdminIndexImport } from './routes/(authenticated)/admin/index'
import { Route as authenticatedAdminTeamIndexImport } from './routes/(authenticated)/admin/team/index'
import { Route as authenticatedAdminScannerIndexImport } from './routes/(authenticated)/admin/scanner/index'
import { Route as authenticatedAdminDesignIndexImport } from './routes/(authenticated)/admin/design/index'
import { Route as authenticatedAdminAssetsIndexImport } from './routes/(authenticated)/admin/assets/index'

// Create/Update Routes

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const authenticatedAdminRoute = authenticatedAdminImport.update({
  id: '/(authenticated)/admin',
  path: '/admin',
  getParentRoute: () => rootRoute,
} as any)

const unauthenticatedLoginIndexRoute = unauthenticatedLoginIndexImport.update({
  id: '/(unauthenticated)/login/',
  path: '/login/',
  getParentRoute: () => rootRoute,
} as any)

const unauthenticatedFwIndexRoute = unauthenticatedFwIndexImport.update({
  id: '/(unauthenticated)/fw/',
  path: '/fw/',
  getParentRoute: () => rootRoute,
} as any)

const authenticatedAdminIndexRoute = authenticatedAdminIndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => authenticatedAdminRoute,
} as any)

const authenticatedAdminTeamIndexRoute =
  authenticatedAdminTeamIndexImport.update({
    id: '/team/',
    path: '/team/',
    getParentRoute: () => authenticatedAdminRoute,
  } as any)

const authenticatedAdminScannerIndexRoute =
  authenticatedAdminScannerIndexImport.update({
    id: '/scanner/',
    path: '/scanner/',
    getParentRoute: () => authenticatedAdminRoute,
  } as any)

const authenticatedAdminDesignIndexRoute =
  authenticatedAdminDesignIndexImport.update({
    id: '/design/',
    path: '/design/',
    getParentRoute: () => authenticatedAdminRoute,
  } as any)

const authenticatedAdminAssetsIndexRoute =
  authenticatedAdminAssetsIndexImport.update({
    id: '/assets/',
    path: '/assets/',
    getParentRoute: () => authenticatedAdminRoute,
  } as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/(authenticated)/admin': {
      id: '/(authenticated)/admin'
      path: '/admin'
      fullPath: '/admin'
      preLoaderRoute: typeof authenticatedAdminImport
      parentRoute: typeof rootRoute
    }
    '/(authenticated)/admin/': {
      id: '/(authenticated)/admin/'
      path: '/'
      fullPath: '/admin/'
      preLoaderRoute: typeof authenticatedAdminIndexImport
      parentRoute: typeof authenticatedAdminImport
    }
    '/(unauthenticated)/fw/': {
      id: '/(unauthenticated)/fw/'
      path: '/fw'
      fullPath: '/fw'
      preLoaderRoute: typeof unauthenticatedFwIndexImport
      parentRoute: typeof rootRoute
    }
    '/(unauthenticated)/login/': {
      id: '/(unauthenticated)/login/'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof unauthenticatedLoginIndexImport
      parentRoute: typeof rootRoute
    }
    '/(authenticated)/admin/assets/': {
      id: '/(authenticated)/admin/assets/'
      path: '/assets'
      fullPath: '/admin/assets'
      preLoaderRoute: typeof authenticatedAdminAssetsIndexImport
      parentRoute: typeof authenticatedAdminImport
    }
    '/(authenticated)/admin/design/': {
      id: '/(authenticated)/admin/design/'
      path: '/design'
      fullPath: '/admin/design'
      preLoaderRoute: typeof authenticatedAdminDesignIndexImport
      parentRoute: typeof authenticatedAdminImport
    }
    '/(authenticated)/admin/scanner/': {
      id: '/(authenticated)/admin/scanner/'
      path: '/scanner'
      fullPath: '/admin/scanner'
      preLoaderRoute: typeof authenticatedAdminScannerIndexImport
      parentRoute: typeof authenticatedAdminImport
    }
    '/(authenticated)/admin/team/': {
      id: '/(authenticated)/admin/team/'
      path: '/team'
      fullPath: '/admin/team'
      preLoaderRoute: typeof authenticatedAdminTeamIndexImport
      parentRoute: typeof authenticatedAdminImport
    }
  }
}

// Create and export the route tree

interface authenticatedAdminRouteChildren {
  authenticatedAdminIndexRoute: typeof authenticatedAdminIndexRoute
  authenticatedAdminAssetsIndexRoute: typeof authenticatedAdminAssetsIndexRoute
  authenticatedAdminDesignIndexRoute: typeof authenticatedAdminDesignIndexRoute
  authenticatedAdminScannerIndexRoute: typeof authenticatedAdminScannerIndexRoute
  authenticatedAdminTeamIndexRoute: typeof authenticatedAdminTeamIndexRoute
}

const authenticatedAdminRouteChildren: authenticatedAdminRouteChildren = {
  authenticatedAdminIndexRoute: authenticatedAdminIndexRoute,
  authenticatedAdminAssetsIndexRoute: authenticatedAdminAssetsIndexRoute,
  authenticatedAdminDesignIndexRoute: authenticatedAdminDesignIndexRoute,
  authenticatedAdminScannerIndexRoute: authenticatedAdminScannerIndexRoute,
  authenticatedAdminTeamIndexRoute: authenticatedAdminTeamIndexRoute,
}

const authenticatedAdminRouteWithChildren =
  authenticatedAdminRoute._addFileChildren(authenticatedAdminRouteChildren)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/admin': typeof authenticatedAdminRouteWithChildren
  '/admin/': typeof authenticatedAdminIndexRoute
  '/fw': typeof unauthenticatedFwIndexRoute
  '/login': typeof unauthenticatedLoginIndexRoute
  '/admin/assets': typeof authenticatedAdminAssetsIndexRoute
  '/admin/design': typeof authenticatedAdminDesignIndexRoute
  '/admin/scanner': typeof authenticatedAdminScannerIndexRoute
  '/admin/team': typeof authenticatedAdminTeamIndexRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/admin': typeof authenticatedAdminIndexRoute
  '/fw': typeof unauthenticatedFwIndexRoute
  '/login': typeof unauthenticatedLoginIndexRoute
  '/admin/assets': typeof authenticatedAdminAssetsIndexRoute
  '/admin/design': typeof authenticatedAdminDesignIndexRoute
  '/admin/scanner': typeof authenticatedAdminScannerIndexRoute
  '/admin/team': typeof authenticatedAdminTeamIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/(authenticated)/admin': typeof authenticatedAdminRouteWithChildren
  '/(authenticated)/admin/': typeof authenticatedAdminIndexRoute
  '/(unauthenticated)/fw/': typeof unauthenticatedFwIndexRoute
  '/(unauthenticated)/login/': typeof unauthenticatedLoginIndexRoute
  '/(authenticated)/admin/assets/': typeof authenticatedAdminAssetsIndexRoute
  '/(authenticated)/admin/design/': typeof authenticatedAdminDesignIndexRoute
  '/(authenticated)/admin/scanner/': typeof authenticatedAdminScannerIndexRoute
  '/(authenticated)/admin/team/': typeof authenticatedAdminTeamIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/admin'
    | '/admin/'
    | '/fw'
    | '/login'
    | '/admin/assets'
    | '/admin/design'
    | '/admin/scanner'
    | '/admin/team'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/admin'
    | '/fw'
    | '/login'
    | '/admin/assets'
    | '/admin/design'
    | '/admin/scanner'
    | '/admin/team'
  id:
    | '__root__'
    | '/'
    | '/(authenticated)/admin'
    | '/(authenticated)/admin/'
    | '/(unauthenticated)/fw/'
    | '/(unauthenticated)/login/'
    | '/(authenticated)/admin/assets/'
    | '/(authenticated)/admin/design/'
    | '/(authenticated)/admin/scanner/'
    | '/(authenticated)/admin/team/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  authenticatedAdminRoute: typeof authenticatedAdminRouteWithChildren
  unauthenticatedFwIndexRoute: typeof unauthenticatedFwIndexRoute
  unauthenticatedLoginIndexRoute: typeof unauthenticatedLoginIndexRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  authenticatedAdminRoute: authenticatedAdminRouteWithChildren,
  unauthenticatedFwIndexRoute: unauthenticatedFwIndexRoute,
  unauthenticatedLoginIndexRoute: unauthenticatedLoginIndexRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/(authenticated)/admin",
        "/(unauthenticated)/fw/",
        "/(unauthenticated)/login/"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/(authenticated)/admin": {
      "filePath": "(authenticated)/admin.tsx",
      "children": [
        "/(authenticated)/admin/",
        "/(authenticated)/admin/assets/",
        "/(authenticated)/admin/design/",
        "/(authenticated)/admin/scanner/",
        "/(authenticated)/admin/team/"
      ]
    },
    "/(authenticated)/admin/": {
      "filePath": "(authenticated)/admin/index.tsx",
      "parent": "/(authenticated)/admin"
    },
    "/(unauthenticated)/fw/": {
      "filePath": "(unauthenticated)/fw/index.tsx"
    },
    "/(unauthenticated)/login/": {
      "filePath": "(unauthenticated)/login/index.tsx"
    },
    "/(authenticated)/admin/assets/": {
      "filePath": "(authenticated)/admin/assets/index.tsx",
      "parent": "/(authenticated)/admin"
    },
    "/(authenticated)/admin/design/": {
      "filePath": "(authenticated)/admin/design/index.tsx",
      "parent": "/(authenticated)/admin"
    },
    "/(authenticated)/admin/scanner/": {
      "filePath": "(authenticated)/admin/scanner/index.tsx",
      "parent": "/(authenticated)/admin"
    },
    "/(authenticated)/admin/team/": {
      "filePath": "(authenticated)/admin/team/index.tsx",
      "parent": "/(authenticated)/admin"
    }
  }
}
ROUTE_MANIFEST_END */
