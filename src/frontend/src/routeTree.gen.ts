/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as IndexRouteImport } from './routes/index'
import { Route as unauthenticatedLoginRouteImport } from './routes/(unauthenticated)/login'
import { Route as unauthenticatedFwRouteImport } from './routes/(unauthenticated)/fw'
import { Route as authenticatedAdminRouteImport } from './routes/(authenticated)/admin'
import { Route as authenticatedAdminIndexRouteImport } from './routes/(authenticated)/admin/index'
import { Route as authenticatedAdminUnassignedRouteImport } from './routes/(authenticated)/admin/unassigned'
import { Route as authenticatedAdminTeamRouteImport } from './routes/(authenticated)/admin/team'
import { Route as authenticatedAdminSettingsRouteImport } from './routes/(authenticated)/admin/settings'
import { Route as authenticatedAdminScannerRouteImport } from './routes/(authenticated)/admin/scanner'
import { Route as authenticatedAdminDesignRouteImport } from './routes/(authenticated)/admin/design'
import { Route as authenticatedAdminAssetsRouteImport } from './routes/(authenticated)/admin/assets'

const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const unauthenticatedLoginRoute = unauthenticatedLoginRouteImport.update({
  id: '/(unauthenticated)/login',
  path: '/login',
  getParentRoute: () => rootRouteImport,
} as any)
const unauthenticatedFwRoute = unauthenticatedFwRouteImport.update({
  id: '/(unauthenticated)/fw',
  path: '/fw',
  getParentRoute: () => rootRouteImport,
} as any)
const authenticatedAdminRoute = authenticatedAdminRouteImport.update({
  id: '/(authenticated)/admin',
  path: '/admin',
  getParentRoute: () => rootRouteImport,
} as any)
const authenticatedAdminIndexRoute = authenticatedAdminIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => authenticatedAdminRoute,
} as any)
const authenticatedAdminUnassignedRoute =
  authenticatedAdminUnassignedRouteImport.update({
    id: '/unassigned',
    path: '/unassigned',
    getParentRoute: () => authenticatedAdminRoute,
  } as any)
const authenticatedAdminTeamRoute = authenticatedAdminTeamRouteImport.update({
  id: '/team',
  path: '/team',
  getParentRoute: () => authenticatedAdminRoute,
} as any)
const authenticatedAdminSettingsRoute =
  authenticatedAdminSettingsRouteImport.update({
    id: '/settings',
    path: '/settings',
    getParentRoute: () => authenticatedAdminRoute,
  } as any)
const authenticatedAdminScannerRoute =
  authenticatedAdminScannerRouteImport.update({
    id: '/scanner',
    path: '/scanner',
    getParentRoute: () => authenticatedAdminRoute,
  } as any)
const authenticatedAdminDesignRoute =
  authenticatedAdminDesignRouteImport.update({
    id: '/design',
    path: '/design',
    getParentRoute: () => authenticatedAdminRoute,
  } as any)
const authenticatedAdminAssetsRoute =
  authenticatedAdminAssetsRouteImport.update({
    id: '/assets',
    path: '/assets',
    getParentRoute: () => authenticatedAdminRoute,
  } as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/admin': typeof authenticatedAdminRouteWithChildren
  '/fw': typeof unauthenticatedFwRoute
  '/login': typeof unauthenticatedLoginRoute
  '/admin/assets': typeof authenticatedAdminAssetsRoute
  '/admin/design': typeof authenticatedAdminDesignRoute
  '/admin/scanner': typeof authenticatedAdminScannerRoute
  '/admin/settings': typeof authenticatedAdminSettingsRoute
  '/admin/team': typeof authenticatedAdminTeamRoute
  '/admin/unassigned': typeof authenticatedAdminUnassignedRoute
  '/admin/': typeof authenticatedAdminIndexRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/fw': typeof unauthenticatedFwRoute
  '/login': typeof unauthenticatedLoginRoute
  '/admin/assets': typeof authenticatedAdminAssetsRoute
  '/admin/design': typeof authenticatedAdminDesignRoute
  '/admin/scanner': typeof authenticatedAdminScannerRoute
  '/admin/settings': typeof authenticatedAdminSettingsRoute
  '/admin/team': typeof authenticatedAdminTeamRoute
  '/admin/unassigned': typeof authenticatedAdminUnassignedRoute
  '/admin': typeof authenticatedAdminIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/(authenticated)/admin': typeof authenticatedAdminRouteWithChildren
  '/(unauthenticated)/fw': typeof unauthenticatedFwRoute
  '/(unauthenticated)/login': typeof unauthenticatedLoginRoute
  '/(authenticated)/admin/assets': typeof authenticatedAdminAssetsRoute
  '/(authenticated)/admin/design': typeof authenticatedAdminDesignRoute
  '/(authenticated)/admin/scanner': typeof authenticatedAdminScannerRoute
  '/(authenticated)/admin/settings': typeof authenticatedAdminSettingsRoute
  '/(authenticated)/admin/team': typeof authenticatedAdminTeamRoute
  '/(authenticated)/admin/unassigned': typeof authenticatedAdminUnassignedRoute
  '/(authenticated)/admin/': typeof authenticatedAdminIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/admin'
    | '/fw'
    | '/login'
    | '/admin/assets'
    | '/admin/design'
    | '/admin/scanner'
    | '/admin/settings'
    | '/admin/team'
    | '/admin/unassigned'
    | '/admin/'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/fw'
    | '/login'
    | '/admin/assets'
    | '/admin/design'
    | '/admin/scanner'
    | '/admin/settings'
    | '/admin/team'
    | '/admin/unassigned'
    | '/admin'
  id:
    | '__root__'
    | '/'
    | '/(authenticated)/admin'
    | '/(unauthenticated)/fw'
    | '/(unauthenticated)/login'
    | '/(authenticated)/admin/assets'
    | '/(authenticated)/admin/design'
    | '/(authenticated)/admin/scanner'
    | '/(authenticated)/admin/settings'
    | '/(authenticated)/admin/team'
    | '/(authenticated)/admin/unassigned'
    | '/(authenticated)/admin/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  authenticatedAdminRoute: typeof authenticatedAdminRouteWithChildren
  unauthenticatedFwRoute: typeof unauthenticatedFwRoute
  unauthenticatedLoginRoute: typeof unauthenticatedLoginRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/(unauthenticated)/login': {
      id: '/(unauthenticated)/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof unauthenticatedLoginRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/(unauthenticated)/fw': {
      id: '/(unauthenticated)/fw'
      path: '/fw'
      fullPath: '/fw'
      preLoaderRoute: typeof unauthenticatedFwRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/(authenticated)/admin': {
      id: '/(authenticated)/admin'
      path: '/admin'
      fullPath: '/admin'
      preLoaderRoute: typeof authenticatedAdminRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/(authenticated)/admin/': {
      id: '/(authenticated)/admin/'
      path: '/'
      fullPath: '/admin/'
      preLoaderRoute: typeof authenticatedAdminIndexRouteImport
      parentRoute: typeof authenticatedAdminRoute
    }
    '/(authenticated)/admin/unassigned': {
      id: '/(authenticated)/admin/unassigned'
      path: '/unassigned'
      fullPath: '/admin/unassigned'
      preLoaderRoute: typeof authenticatedAdminUnassignedRouteImport
      parentRoute: typeof authenticatedAdminRoute
    }
    '/(authenticated)/admin/team': {
      id: '/(authenticated)/admin/team'
      path: '/team'
      fullPath: '/admin/team'
      preLoaderRoute: typeof authenticatedAdminTeamRouteImport
      parentRoute: typeof authenticatedAdminRoute
    }
    '/(authenticated)/admin/settings': {
      id: '/(authenticated)/admin/settings'
      path: '/settings'
      fullPath: '/admin/settings'
      preLoaderRoute: typeof authenticatedAdminSettingsRouteImport
      parentRoute: typeof authenticatedAdminRoute
    }
    '/(authenticated)/admin/scanner': {
      id: '/(authenticated)/admin/scanner'
      path: '/scanner'
      fullPath: '/admin/scanner'
      preLoaderRoute: typeof authenticatedAdminScannerRouteImport
      parentRoute: typeof authenticatedAdminRoute
    }
    '/(authenticated)/admin/design': {
      id: '/(authenticated)/admin/design'
      path: '/design'
      fullPath: '/admin/design'
      preLoaderRoute: typeof authenticatedAdminDesignRouteImport
      parentRoute: typeof authenticatedAdminRoute
    }
    '/(authenticated)/admin/assets': {
      id: '/(authenticated)/admin/assets'
      path: '/assets'
      fullPath: '/admin/assets'
      preLoaderRoute: typeof authenticatedAdminAssetsRouteImport
      parentRoute: typeof authenticatedAdminRoute
    }
  }
}

interface authenticatedAdminRouteChildren {
  authenticatedAdminAssetsRoute: typeof authenticatedAdminAssetsRoute
  authenticatedAdminDesignRoute: typeof authenticatedAdminDesignRoute
  authenticatedAdminScannerRoute: typeof authenticatedAdminScannerRoute
  authenticatedAdminSettingsRoute: typeof authenticatedAdminSettingsRoute
  authenticatedAdminTeamRoute: typeof authenticatedAdminTeamRoute
  authenticatedAdminUnassignedRoute: typeof authenticatedAdminUnassignedRoute
  authenticatedAdminIndexRoute: typeof authenticatedAdminIndexRoute
}

const authenticatedAdminRouteChildren: authenticatedAdminRouteChildren = {
  authenticatedAdminAssetsRoute: authenticatedAdminAssetsRoute,
  authenticatedAdminDesignRoute: authenticatedAdminDesignRoute,
  authenticatedAdminScannerRoute: authenticatedAdminScannerRoute,
  authenticatedAdminSettingsRoute: authenticatedAdminSettingsRoute,
  authenticatedAdminTeamRoute: authenticatedAdminTeamRoute,
  authenticatedAdminUnassignedRoute: authenticatedAdminUnassignedRoute,
  authenticatedAdminIndexRoute: authenticatedAdminIndexRoute,
}

const authenticatedAdminRouteWithChildren =
  authenticatedAdminRoute._addFileChildren(authenticatedAdminRouteChildren)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  authenticatedAdminRoute: authenticatedAdminRouteWithChildren,
  unauthenticatedFwRoute: unauthenticatedFwRoute,
  unauthenticatedLoginRoute: unauthenticatedLoginRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
