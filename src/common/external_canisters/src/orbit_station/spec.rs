//! This file is automatically generated by the crate's `build.rs` script.

// This is an experimental feature to generate Rust binding from Candid.
// You may want to manually adjust some of the types.
#![allow(dead_code, unused_imports)]
use candid::{self, CandidType, Deserialize, Principal};
use ic_cdk::api::call::CallResult as Result;

#[derive(CandidType, Deserialize)]
pub struct SystemUpgrade { pub name: Option<String> }
pub type Uuid = String;
#[derive(CandidType, Deserialize)]
pub struct AssetMetadata { pub key: String, pub value: String }
#[derive(CandidType, Deserialize)]
pub struct InitAssetInput {
  pub id: Uuid,
  pub decimals: u32,
  pub standards: Vec<String>,
  pub metadata: Vec<AssetMetadata>,
  pub name: String,
  pub blockchain: String,
  pub symbol: String,
}
#[derive(CandidType, Deserialize)]
pub enum SystemUpgraderInput {
  Id(Principal),
  Deploy{
    initial_cycles: Option<candid::Nat>,
    wasm_module: serde_bytes::ByteBuf,
  },
}
#[derive(CandidType, Deserialize)]
pub struct AccountMetadata { pub key: String, pub value: String }
pub type AccountSeed = serde_bytes::ByteBuf;
#[derive(CandidType, Deserialize)]
pub struct InitAccountInput {
  pub id: Option<Uuid>,
  pub metadata: Vec<AccountMetadata>,
  pub name: String,
  pub assets: Vec<Uuid>,
  pub seed: AccountSeed,
}
#[derive(CandidType, Deserialize)]
pub struct AdminInitInput { pub name: String, pub identity: Principal }
#[derive(CandidType, Deserialize)]
pub struct SystemInit {
  pub name: String,
  pub assets: Option<Vec<InitAssetInput>>,
  pub fallback_controller: Option<Principal>,
  pub upgrader: SystemUpgraderInput,
  pub accounts: Option<Vec<InitAccountInput>>,
  pub admins: Vec<AdminInitInput>,
  pub quorum: Option<u16>,
}
#[derive(CandidType, Deserialize)]
pub enum SystemInstall { Upgrade(SystemUpgrade), Init(SystemInit) }
#[derive(CandidType, Deserialize)]
pub struct CancelRequestInput {
  pub request_id: Uuid,
  pub reason: Option<String>,
}
pub type TimestampRfc3339 = String;
#[derive(CandidType, Deserialize)]
pub enum RequestStatus {
  Failed{ reason: Option<String> },
  Approved,
  Rejected,
  Scheduled{ scheduled_at: TimestampRfc3339 },
  Cancelled{ reason: Option<String> },
  Processing{ started_at: TimestampRfc3339 },
  Created,
  Completed{ completed_at: TimestampRfc3339 },
}
#[derive(CandidType, Deserialize)]
pub enum RequestExecutionSchedule {
  Immediate,
  Scheduled{ execution_time: TimestampRfc3339 },
}
#[derive(CandidType, Deserialize)]
pub struct RemoveAssetOperationInput { pub asset_id: Uuid }
#[derive(CandidType, Deserialize)]
pub struct RemoveAssetOperation { pub input: RemoveAssetOperationInput }
#[derive(CandidType, Deserialize)]
pub struct UserGroup { pub id: Uuid, pub name: String }
#[derive(CandidType, Deserialize)]
pub struct AddUserGroupOperationInput { pub name: String }
#[derive(CandidType, Deserialize)]
pub struct AddUserGroupOperation {
  pub user_group: Option<UserGroup>,
  pub input: AddUserGroupOperationInput,
}
#[derive(CandidType, Deserialize)]
pub enum ResourceId { Id(Uuid), Any }
#[derive(CandidType, Deserialize)]
pub enum RequestResourceAction { List, Read(ResourceId) }
#[derive(CandidType, Deserialize)]
pub enum NotificationResourceAction { List, Update(ResourceId) }
#[derive(CandidType, Deserialize)]
pub enum SystemResourceAction {
  Upgrade,
  ManageSystemInfo,
  SystemInfo,
  Capabilities,
}
#[derive(CandidType, Deserialize)]
pub enum UserResourceAction {
  List,
  Read(ResourceId),
  Create,
  Update(ResourceId),
}
#[derive(CandidType, Deserialize)]
pub struct CanisterMethod {
  pub canister_id: Principal,
  pub method_name: String,
}
#[derive(CandidType, Deserialize)]
pub enum ExecutionMethodResourceTarget { Any, ExecutionMethod(CanisterMethod) }
#[derive(CandidType, Deserialize)]
pub enum ValidationMethodResourceTarget { No, ValidationMethod(CanisterMethod) }
#[derive(CandidType, Deserialize)]
pub struct CallExternalCanisterResourceTarget {
  pub execution_method: ExecutionMethodResourceTarget,
  pub validation_method: ValidationMethodResourceTarget,
}
#[derive(CandidType, Deserialize)]
pub enum ExternalCanisterId { Any, Canister(Principal) }
#[derive(CandidType, Deserialize)]
pub enum ExternalCanisterResourceAction {
  Call(CallExternalCanisterResourceTarget),
  Fund(ExternalCanisterId),
  List,
  Read(ExternalCanisterId),
  Create,
  Change(ExternalCanisterId),
}
#[derive(CandidType, Deserialize)]
pub enum AccountResourceAction {
  List,
  Read(ResourceId),
  Create,
  Transfer(ResourceId),
  Update(ResourceId),
}
#[derive(CandidType, Deserialize)]
pub enum ResourceAction {
  List,
  Read(ResourceId),
  Delete(ResourceId),
  Create,
  Update(ResourceId),
}
#[derive(CandidType, Deserialize)]
pub enum PermissionResourceAction { Read, Update }
#[derive(CandidType, Deserialize)]
pub enum Resource {
  Request(RequestResourceAction),
  Notification(NotificationResourceAction),
  System(SystemResourceAction),
  User(UserResourceAction),
  ExternalCanister(ExternalCanisterResourceAction),
  Account(AccountResourceAction),
  AddressBook(ResourceAction),
  Asset(ResourceAction),
  NamedRule(ResourceAction),
  UserGroup(ResourceAction),
  Permission(PermissionResourceAction),
  RequestPolicy(ResourceAction),
}
#[derive(CandidType, Deserialize)]
pub enum AuthScope { Authenticated, Public, Restricted }
#[derive(CandidType, Deserialize)]
pub struct EditPermissionOperationInput {
  pub resource: Resource,
  pub user_groups: Option<Vec<Uuid>>,
  pub auth_scope: Option<AuthScope>,
  pub users: Option<Vec<Uuid>>,
}
#[derive(CandidType, Deserialize)]
pub struct EditPermissionOperation { pub input: EditPermissionOperationInput }
#[derive(CandidType, Deserialize)]
pub struct SnapshotExternalCanisterOperationInput {
  pub force: bool,
  pub replace_snapshot: Option<String>,
  pub canister_id: Principal,
}
#[derive(CandidType, Deserialize)]
pub struct SnapshotExternalCanisterOperation {
  pub input: SnapshotExternalCanisterOperationInput,
  pub snapshot_id: Option<String>,
}
#[derive(CandidType, Deserialize)]
pub enum PruneExternalCanisterOperationInputPrune {
  #[serde(rename="snapshot")]
  Snapshot(String),
  #[serde(rename="state")]
  State,
  #[serde(rename="chunk_store")]
  ChunkStore,
}
#[derive(CandidType, Deserialize)]
pub struct PruneExternalCanisterOperationInput {
  pub canister_id: Principal,
  pub prune: PruneExternalCanisterOperationInputPrune,
}
#[derive(CandidType, Deserialize)]
pub struct PruneExternalCanisterOperation {
  pub input: PruneExternalCanisterOperationInput,
}
#[derive(CandidType, Deserialize)]
pub enum UserSpecifier { Id(Vec<Uuid>), Any, Group(Vec<Uuid>) }
#[derive(CandidType, Deserialize)]
pub struct Quorum { pub min_approved: u16, pub approvers: UserSpecifier }
#[derive(CandidType, Deserialize)]
pub struct QuorumPercentage {
  pub min_approved: u16,
  pub approvers: UserSpecifier,
}
#[derive(CandidType, Deserialize)]
pub struct AddressBookMetadata { pub key: String, pub value: String }
#[derive(CandidType, Deserialize)]
pub enum RequestPolicyRule {
  Not(Box<RequestPolicyRule>),
  Quorum(Quorum),
  AllowListed,
  QuorumPercentage(QuorumPercentage),
  AutoApproved,
  AllOf(Vec<Box<RequestPolicyRule>>),
  AnyOf(Vec<Box<RequestPolicyRule>>),
  AllowListedByMetadata(AddressBookMetadata),
  NamedRule(Uuid),
}
#[derive(CandidType, Deserialize)]
pub struct EditNamedRuleOperationInput {
  pub name: Option<String>,
  pub rule: Option<Box<RequestPolicyRule>>,
  pub description: Option<Option<String>>,
  pub named_rule_id: Uuid,
}
#[derive(CandidType, Deserialize)]
pub struct EditNamedRuleOperation { pub input: EditNamedRuleOperationInput }
#[derive(CandidType, Deserialize)]
pub struct Allow {
  pub user_groups: Vec<Uuid>,
  pub auth_scope: AuthScope,
  pub users: Vec<Uuid>,
}
#[derive(CandidType, Deserialize)]
pub struct ExternalCanisterChangeCallPermissionsInputOverrideSpecifiedByExecutionMethodsItemPermissionsItem {
  pub allow: Allow,
  pub validation_method: ValidationMethodResourceTarget,
}
#[derive(CandidType, Deserialize)]
pub struct ExternalCanisterChangeCallPermissionsInputOverrideSpecifiedByExecutionMethodsItem {
  pub execution_method: String,
  pub permissions: Vec<
    ExternalCanisterChangeCallPermissionsInputOverrideSpecifiedByExecutionMethodsItemPermissionsItem
  >,
}
#[derive(CandidType, Deserialize)]
pub struct CanisterExecutionAndValidationMethodPair {
  pub execution_method: String,
  pub validation_method: ValidationMethodResourceTarget,
}
#[derive(CandidType, Deserialize)]
pub struct ExternalCanisterChangeCallPermissionsInputOverrideSpecifiedByExecutionValidationMethodPairsItem {
  pub allow: Option<Allow>,
  pub method_configuration: CanisterExecutionAndValidationMethodPair,
}
#[derive(CandidType, Deserialize)]
pub struct ExternalCanisterCallPermission {
  pub execution_method: String,
  pub allow: Allow,
  pub validation_method: ValidationMethodResourceTarget,
}
#[derive(CandidType, Deserialize)]
pub enum ExternalCanisterChangeCallPermissionsInput {
  OverrideSpecifiedByExecutionMethods(
    Vec<
      ExternalCanisterChangeCallPermissionsInputOverrideSpecifiedByExecutionMethodsItem
    >
  ),
  OverrideSpecifiedByExecutionValidationMethodPairs(
    Vec<
      ExternalCanisterChangeCallPermissionsInputOverrideSpecifiedByExecutionValidationMethodPairsItem
    >
  ),
  ReplaceAllBy(Vec<ExternalCanisterCallPermission>),
}
#[derive(CandidType, Deserialize)]
pub struct ExternalCanisterPermissionsUpdateInput {
  pub calls: Option<ExternalCanisterChangeCallPermissionsInput>,
  pub read: Option<Allow>,
  pub change: Option<Allow>,
}
#[derive(CandidType, Deserialize)]
pub struct ExternalCanisterChangeCallRequestPoliciesInputOverrideSpecifiedByExecutionMethodsItemPoliciesItem {
  pub rule: Box<RequestPolicyRule>,
  pub validation_method: ValidationMethodResourceTarget,
  pub policy_id: Option<Uuid>,
}
#[derive(CandidType, Deserialize)]
pub struct ExternalCanisterChangeCallRequestPoliciesInputOverrideSpecifiedByExecutionMethodsItem {
  pub execution_method: String,
  pub policies: Vec<
    ExternalCanisterChangeCallRequestPoliciesInputOverrideSpecifiedByExecutionMethodsItemPoliciesItem
  >,
}
#[derive(CandidType, Deserialize)]
pub struct ExternalCanisterChangeRequestPolicyRuleInput {
  pub rule: Box<RequestPolicyRule>,
  pub policy_id: Option<Uuid>,
}
#[derive(CandidType, Deserialize)]
pub struct ExternalCanisterChangeCallRequestPoliciesInputOverrideSpecifiedByExecutionValidationMethodPairsItem {
  pub method_configuration: CanisterExecutionAndValidationMethodPair,
  pub policies: Vec<ExternalCanisterChangeRequestPolicyRuleInput>,
}
#[derive(CandidType, Deserialize)]
pub struct ExternalCanisterCallRequestPolicyRuleInput {
  pub execution_method: String,
  pub rule: Box<RequestPolicyRule>,
  pub validation_method: ValidationMethodResourceTarget,
  pub policy_id: Option<Uuid>,
}
#[derive(CandidType, Deserialize)]
pub enum ExternalCanisterChangeCallRequestPoliciesInput {
  RemoveByPolicyIds(Vec<Uuid>),
  OverrideSpecifiedByExecutionMethods(
    Vec<
      ExternalCanisterChangeCallRequestPoliciesInputOverrideSpecifiedByExecutionMethodsItem
    >
  ),
  OverrideSpecifiedByExecutionValidationMethodPairs(
    Vec<
      ExternalCanisterChangeCallRequestPoliciesInputOverrideSpecifiedByExecutionValidationMethodPairsItem
    >
  ),
  ReplaceAllBy(Vec<ExternalCanisterCallRequestPolicyRuleInput>),
}
#[derive(CandidType, Deserialize)]
pub struct ExternalCanisterRequestPoliciesUpdateInput {
  pub calls: Option<ExternalCanisterChangeCallRequestPoliciesInput>,
  pub change: Option<Vec<ExternalCanisterChangeRequestPolicyRuleInput>>,
}
#[derive(CandidType, Deserialize)]
pub enum ExternalCanisterState { Active, Archived }
#[derive(CandidType, Deserialize)]
pub struct ExternalCanisterMetadata { pub key: String, pub value: String }
#[derive(CandidType, Deserialize)]
pub enum ChangeExternalCanisterMetadata {
  OverrideSpecifiedBy(Vec<ExternalCanisterMetadata>),
  RemoveKeys(Vec<String>),
  ReplaceAllBy(Vec<ExternalCanisterMetadata>),
}
#[derive(CandidType, Deserialize)]
pub struct ConfigureExternalCanisterSettingsInput {
  pub permissions: Option<ExternalCanisterPermissionsUpdateInput>,
  pub name: Option<String>,
  pub labels: Option<Vec<String>>,
  pub description: Option<String>,
  pub request_policies: Option<ExternalCanisterRequestPoliciesUpdateInput>,
  pub state: Option<ExternalCanisterState>,
  pub change_metadata: Option<ChangeExternalCanisterMetadata>,
}
#[derive(CandidType, Deserialize)]
pub enum LogVisibility {
  #[serde(rename="controllers")]
  Controllers,
  #[serde(rename="public")]
  Public,
}
#[derive(CandidType, Deserialize)]
pub struct DefiniteCanisterSettingsInput {
  pub freezing_threshold: Option<candid::Nat>,
  pub controllers: Option<Vec<Principal>>,
  pub reserved_cycles_limit: Option<candid::Nat>,
  pub log_visibility: Option<LogVisibility>,
  pub wasm_memory_limit: Option<candid::Nat>,
  pub memory_allocation: Option<candid::Nat>,
  pub compute_allocation: Option<candid::Nat>,
}
#[derive(CandidType, Deserialize)]
pub enum ConfigureExternalCanisterOperationKind {
  SoftDelete,
  Settings(ConfigureExternalCanisterSettingsInput),
  Delete,
  NativeSettings(DefiniteCanisterSettingsInput),
}
#[derive(CandidType, Deserialize)]
pub struct ConfigureExternalCanisterOperationInput {
  pub kind: ConfigureExternalCanisterOperationKind,
  pub canister_id: Principal,
}
pub type ConfigureExternalCanisterOperation = ConfigureExternalCanisterOperationInput;
#[derive(CandidType, Deserialize)]
pub enum CanisterInstallMode {
  #[serde(rename="reinstall")]
  Reinstall,
  #[serde(rename="upgrade")]
  Upgrade,
  #[serde(rename="install")]
  Install,
}
pub type Sha256Hash = String;
#[derive(CandidType, Deserialize)]
pub struct ChangeExternalCanisterOperation {
  pub mode: CanisterInstallMode,
  pub canister_id: Principal,
  pub module_checksum: Sha256Hash,
  pub arg_checksum: Option<Sha256Hash>,
}
#[derive(CandidType, Deserialize)]
pub enum CycleObtainStrategyInput {
  Disabled,
  MintFromNativeToken{ account_id: Uuid },
  WithdrawFromCyclesLedger{ account_id: Uuid },
}
#[derive(CandidType, Deserialize)]
pub struct MonitoringExternalCanisterCyclesThresholdInput {
  pub fund_cycles: candid::Nat,
  pub min_cycles: candid::Nat,
}
#[derive(CandidType, Deserialize)]
pub struct MonitoringExternalCanisterEstimatedRuntimeInput {
  pub fund_runtime_secs: u64,
  pub fallback_min_cycles: candid::Nat,
  pub min_runtime_secs: u64,
  pub fallback_fund_cycles: candid::Nat,
  pub max_runtime_cycles_fund: candid::Nat,
}
#[derive(CandidType, Deserialize)]
pub enum MonitorExternalCanisterStrategyInput {
  Always(candid::Nat),
  BelowThreshold(MonitoringExternalCanisterCyclesThresholdInput),
  BelowEstimatedRuntime(MonitoringExternalCanisterEstimatedRuntimeInput),
}
#[derive(CandidType, Deserialize)]
pub struct MonitorExternalCanisterStartInput {
  pub cycle_obtain_strategy: Option<CycleObtainStrategyInput>,
  pub funding_strategy: MonitorExternalCanisterStrategyInput,
}
#[derive(CandidType, Deserialize)]
pub enum MonitorExternalCanisterOperationKind {
  Start(MonitorExternalCanisterStartInput),
  Stop,
}
#[derive(CandidType, Deserialize)]
pub struct MonitorExternalCanisterOperationInput {
  pub kind: MonitorExternalCanisterOperationKind,
  pub canister_id: Principal,
}
pub type MonitorExternalCanisterOperation = MonitorExternalCanisterOperationInput;
#[derive(CandidType, Deserialize)]
pub enum UserStatus { Inactive, Active }
#[derive(CandidType, Deserialize)]
pub struct User {
  pub id: Uuid,
  pub status: UserStatus,
  pub groups: Vec<UserGroup>,
  pub name: String,
  pub last_modification_timestamp: TimestampRfc3339,
  pub identities: Vec<Principal>,
}
#[derive(CandidType, Deserialize)]
pub struct AddUserOperationInput {
  pub status: UserStatus,
  pub groups: Vec<Uuid>,
  pub name: String,
  pub identities: Vec<Principal>,
}
#[derive(CandidType, Deserialize)]
pub struct AddUserOperation {
  pub user: Option<User>,
  pub input: AddUserOperationInput,
}
#[derive(CandidType, Deserialize)]
pub enum ChangeMetadata {
  OverrideSpecifiedBy(Vec<AssetMetadata>),
  RemoveKeys(Vec<String>),
  ReplaceAllBy(Vec<AssetMetadata>),
}
pub type AssetSymbol = String;
#[derive(CandidType, Deserialize)]
pub struct EditAssetOperationInput {
  pub standards: Option<Vec<String>>,
  pub name: Option<String>,
  pub blockchain: Option<String>,
  pub change_metadata: Option<ChangeMetadata>,
  pub asset_id: Uuid,
  pub symbol: Option<AssetSymbol>,
}
#[derive(CandidType, Deserialize)]
pub struct EditAssetOperation { pub input: EditAssetOperationInput }
#[derive(CandidType, Deserialize)]
pub struct EditUserGroupOperationInput {
  pub name: String,
  pub user_group_id: Uuid,
}
#[derive(CandidType, Deserialize)]
pub struct EditUserGroupOperation { pub input: EditUserGroupOperationInput }
#[derive(CandidType, Deserialize)]
pub struct DisasterRecoveryCommittee {
  pub user_group_id: Uuid,
  pub quorum: u16,
}
#[derive(CandidType, Deserialize)]
pub struct SetDisasterRecoveryOperation {
  pub committee: Option<DisasterRecoveryCommittee>,
}
#[derive(CandidType, Deserialize)]
pub enum ResourceIds { Any, Ids(Vec<Uuid>) }
#[derive(CandidType, Deserialize)]
pub enum ResourceSpecifier { Any, Resource(Resource) }
#[derive(CandidType, Deserialize)]
pub enum RequestSpecifier {
  RemoveAsset(ResourceIds),
  AddUserGroup,
  EditPermission(ResourceSpecifier),
  EditNamedRule(ResourceIds),
  ChangeExternalCanister(ExternalCanisterId),
  AddUser,
  EditAsset(ResourceIds),
  EditUserGroup(ResourceIds),
  SetDisasterRecovery,
  EditRequestPolicy(ResourceIds),
  RemoveRequestPolicy(ResourceIds),
  AddAsset,
  SystemUpgrade,
  RemoveAddressBookEntry(ResourceIds),
  CreateExternalCanister,
  EditAddressBookEntry(ResourceIds),
  FundExternalCanister(ExternalCanisterId),
  EditUser(ResourceIds),
  ManageSystemInfo,
  Transfer(ResourceIds),
  EditAccount(ResourceIds),
  AddAddressBookEntry,
  AddRequestPolicy,
  RemoveNamedRule(ResourceIds),
  RemoveUserGroup(ResourceIds),
  CallExternalCanister(CallExternalCanisterResourceTarget),
  AddNamedRule,
  AddAccount,
}
#[derive(CandidType, Deserialize)]
pub struct EditRequestPolicyOperationInput {
  pub rule: Option<Box<RequestPolicyRule>>,
  pub specifier: Option<RequestSpecifier>,
  pub policy_id: Uuid,
}
#[derive(CandidType, Deserialize)]
pub struct EditRequestPolicyOperation {
  pub input: EditRequestPolicyOperationInput,
}
#[derive(CandidType, Deserialize)]
pub struct RemoveRequestPolicyOperationInput { pub policy_id: Uuid }
#[derive(CandidType, Deserialize)]
pub struct RemoveRequestPolicyOperation {
  pub input: RemoveRequestPolicyOperationInput,
}
#[derive(CandidType, Deserialize)]
pub struct Asset {
  pub id: Uuid,
  pub decimals: u32,
  pub standards: Vec<String>,
  pub metadata: Vec<AssetMetadata>,
  pub name: String,
  pub blockchain: String,
  pub symbol: AssetSymbol,
}
#[derive(CandidType, Deserialize)]
pub struct AddAssetOperationInput {
  pub decimals: u32,
  pub standards: Vec<String>,
  pub metadata: Vec<AssetMetadata>,
  pub name: String,
  pub blockchain: String,
  pub symbol: AssetSymbol,
}
#[derive(CandidType, Deserialize)]
pub struct AddAssetOperation {
  pub asset: Option<Asset>,
  pub input: AddAssetOperationInput,
}
#[derive(CandidType, Deserialize)]
pub enum SystemUpgradeTarget { UpgradeUpgrader, UpgradeStation }
#[derive(CandidType, Deserialize)]
pub struct SystemUpgradeOperation {
  pub module_checksum: Sha256Hash,
  pub target: SystemUpgradeTarget,
  pub arg_checksum: Option<Sha256Hash>,
}
#[derive(CandidType, Deserialize)]
pub struct RemoveAddressBookEntryOperationInput {
  pub address_book_entry_id: Uuid,
}
#[derive(CandidType, Deserialize)]
pub struct RemoveAddressBookEntryOperation {
  pub input: RemoveAddressBookEntryOperationInput,
}
#[derive(CandidType, Deserialize)]
pub struct ExternalCanisterPermissions {
  pub calls: Vec<ExternalCanisterCallPermission>,
  pub read: Allow,
  pub change: Allow,
}
pub type ExternalCanisterPermissionsCreateInput = ExternalCanisterPermissions;
#[derive(CandidType, Deserialize)]
pub struct CreateExternalCanisterOperationKindAddExisting {
  pub canister_id: Principal,
}
#[derive(CandidType, Deserialize)]
pub struct SubnetFilter { pub subnet_type: Option<String> }
#[derive(CandidType, Deserialize)]
pub enum SubnetSelection { Filter(SubnetFilter), Subnet{ subnet: Principal } }
#[derive(CandidType, Deserialize)]
pub struct CreateExternalCanisterOperationKindCreateNew {
  pub initial_cycles: Option<u64>,
  pub subnet_selection: Option<SubnetSelection>,
}
#[derive(CandidType, Deserialize)]
pub enum CreateExternalCanisterOperationKind {
  AddExisting(CreateExternalCanisterOperationKindAddExisting),
  CreateNew(CreateExternalCanisterOperationKindCreateNew),
}
#[derive(CandidType, Deserialize)]
pub struct ExternalCanisterRequestPoliciesCreateInput {
  pub calls: Vec<ExternalCanisterCallRequestPolicyRuleInput>,
  pub change: Vec<ExternalCanisterChangeRequestPolicyRuleInput>,
}
#[derive(CandidType, Deserialize)]
pub struct CreateExternalCanisterOperationInput {
  pub permissions: ExternalCanisterPermissionsCreateInput,
  pub metadata: Option<Vec<ExternalCanisterMetadata>>,
  pub kind: CreateExternalCanisterOperationKind,
  pub name: String,
  pub labels: Option<Vec<String>>,
  pub description: Option<String>,
  pub request_policies: ExternalCanisterRequestPoliciesCreateInput,
}
#[derive(CandidType, Deserialize)]
pub struct CreateExternalCanisterOperation {
  pub canister_id: Option<Principal>,
  pub input: CreateExternalCanisterOperationInput,
}
#[derive(CandidType, Deserialize)]
pub enum ChangeAddressBookMetadata {
  OverrideSpecifiedBy(Vec<AddressBookMetadata>),
  RemoveKeys(Vec<String>),
  ReplaceAllBy(Vec<AddressBookMetadata>),
}
#[derive(CandidType, Deserialize)]
pub struct EditAddressBookEntryOperationInput {
  pub labels: Option<Vec<String>>,
  pub change_metadata: Option<ChangeAddressBookMetadata>,
  pub address_book_entry_id: Uuid,
  pub address_owner: Option<String>,
}
#[derive(CandidType, Deserialize)]
pub struct EditAddressBookEntryOperation {
  pub input: EditAddressBookEntryOperationInput,
}
#[derive(CandidType, Deserialize)]
pub struct FundExternalCanisterSendCyclesInput { pub cycles: u64 }
#[derive(CandidType, Deserialize)]
pub enum FundExternalCanisterOperationKind {
  Send(FundExternalCanisterSendCyclesInput),
}
#[derive(CandidType, Deserialize)]
pub struct FundExternalCanisterOperationInput {
  pub kind: FundExternalCanisterOperationKind,
  pub canister_id: Principal,
}
pub type FundExternalCanisterOperation = FundExternalCanisterOperationInput;
#[derive(CandidType, Deserialize)]
pub struct EditUserOperationInput {
  pub id: Uuid,
  pub status: Option<UserStatus>,
  pub groups: Option<Vec<Uuid>>,
  pub cancel_pending_requests: Option<bool>,
  pub name: Option<String>,
  pub identities: Option<Vec<Principal>>,
}
#[derive(CandidType, Deserialize)]
pub struct EditUserOperation { pub input: EditUserOperationInput }
#[derive(CandidType, Deserialize)]
pub struct ManageSystemInfoOperationInput {
  pub name: Option<String>,
  pub cycle_obtain_strategy: Option<CycleObtainStrategyInput>,
}
#[derive(CandidType, Deserialize)]
pub struct ManageSystemInfoOperation {
  pub input: ManageSystemInfoOperationInput,
}
pub type NetworkId = String;
#[derive(CandidType, Deserialize)]
pub struct Network { pub id: NetworkId, pub name: String }
#[derive(CandidType, Deserialize)]
pub struct AccountBalance {
  pub account_id: Uuid,
  pub decimals: u32,
  pub balance: candid::Nat,
  pub last_update_timestamp: TimestampRfc3339,
  pub query_state: String,
  pub asset_id: Uuid,
}
#[derive(CandidType, Deserialize)]
pub struct AccountAsset {
  pub balance: Option<AccountBalance>,
  pub asset_id: Uuid,
}
#[derive(CandidType, Deserialize)]
pub struct AccountAddress { pub address: String, pub format: String }
#[derive(CandidType, Deserialize)]
pub struct Account {
  pub id: Uuid,
  pub configs_request_policy: Option<Box<RequestPolicyRule>>,
  pub metadata: Vec<AccountMetadata>,
  pub name: String,
  pub assets: Vec<AccountAsset>,
  pub addresses: Vec<AccountAddress>,
  pub transfer_request_policy: Option<Box<RequestPolicyRule>>,
  pub last_modification_timestamp: TimestampRfc3339,
}
#[derive(CandidType, Deserialize)]
pub struct TransferMetadata { pub key: String, pub value: String }
#[derive(CandidType, Deserialize)]
pub struct TransferOperationInput {
  pub to: String,
  pub fee: Option<candid::Nat>,
  pub with_standard: String,
  pub from_account_id: Uuid,
  pub metadata: Vec<TransferMetadata>,
  pub network: Option<Network>,
  pub amount: candid::Nat,
  pub from_asset_id: Uuid,
}
#[derive(CandidType, Deserialize)]
pub struct TransferOperation {
  pub fee: Option<candid::Nat>,
  pub from_asset: Asset,
  pub network: Network,
  pub transfer_id: Option<Uuid>,
  pub from_account: Option<Account>,
  pub input: TransferOperationInput,
}
#[derive(CandidType, Deserialize)]
pub enum RequestPolicyRuleInput { Set(Box<RequestPolicyRule>), Remove }
#[derive(CandidType, Deserialize)]
pub enum ChangeAssets {
  ReplaceWith{ assets: Vec<Uuid> },
  Change{ add_assets: Vec<Uuid>, remove_assets: Vec<Uuid> },
}
#[derive(CandidType, Deserialize)]
pub struct EditAccountOperationInput {
  pub account_id: Uuid,
  pub configs_request_policy: Option<RequestPolicyRuleInput>,
  pub read_permission: Option<Allow>,
  pub configs_permission: Option<Allow>,
  pub name: Option<String>,
  pub change_assets: Option<ChangeAssets>,
  pub transfer_request_policy: Option<RequestPolicyRuleInput>,
  pub transfer_permission: Option<Allow>,
}
#[derive(CandidType, Deserialize)]
pub struct EditAccountOperation { pub input: EditAccountOperationInput }
#[derive(CandidType, Deserialize)]
pub struct AddressBookEntry {
  pub id: Uuid,
  pub metadata: Vec<AddressBookMetadata>,
  pub labels: Vec<String>,
  pub blockchain: String,
  pub address: String,
  pub last_modification_timestamp: String,
  pub address_format: String,
  pub address_owner: String,
}
#[derive(CandidType, Deserialize)]
pub struct AddAddressBookEntryOperationInput {
  pub metadata: Vec<AddressBookMetadata>,
  pub labels: Vec<String>,
  pub blockchain: String,
  pub address: String,
  pub address_format: String,
  pub address_owner: String,
}
#[derive(CandidType, Deserialize)]
pub struct AddAddressBookEntryOperation {
  pub address_book_entry: Option<AddressBookEntry>,
  pub input: AddAddressBookEntryOperationInput,
}
#[derive(CandidType, Deserialize)]
pub struct AddRequestPolicyOperationInput {
  pub rule: Box<RequestPolicyRule>,
  pub specifier: RequestSpecifier,
}
#[derive(CandidType, Deserialize)]
pub struct AddRequestPolicyOperation {
  pub input: AddRequestPolicyOperationInput,
  pub policy_id: Option<Uuid>,
}
#[derive(CandidType, Deserialize)]
pub struct RemoveNamedRuleOperationInput { pub named_rule_id: Uuid }
#[derive(CandidType, Deserialize)]
pub struct RemoveNamedRuleOperation { pub input: RemoveNamedRuleOperationInput }
#[derive(CandidType, Deserialize)]
pub struct RemoveUserGroupOperationInput { pub user_group_id: Uuid }
#[derive(CandidType, Deserialize)]
pub struct RemoveUserGroupOperation { pub input: RemoveUserGroupOperationInput }
#[derive(CandidType, Deserialize)]
pub struct CallExternalCanisterOperation {
  pub arg: Option<serde_bytes::ByteBuf>,
  pub execution_method: CanisterMethod,
  pub validation_method: Option<CanisterMethod>,
  pub arg_checksum: Option<Sha256Hash>,
  pub execution_method_cycles: Option<u64>,
  pub arg_rendering: Option<String>,
  pub execution_method_reply: Option<serde_bytes::ByteBuf>,
}
#[derive(CandidType, Deserialize)]
pub struct NamedRule {
  pub id: Uuid,
  pub name: String,
  pub rule: Box<RequestPolicyRule>,
  pub description: Option<String>,
}
#[derive(CandidType, Deserialize)]
pub struct AddNamedRuleOperationInput {
  pub name: String,
  pub rule: Box<RequestPolicyRule>,
  pub description: Option<String>,
}
#[derive(CandidType, Deserialize)]
pub struct AddNamedRuleOperation {
  pub named_rule: Option<NamedRule>,
  pub input: AddNamedRuleOperationInput,
}
#[derive(CandidType, Deserialize)]
pub struct RestoreExternalCanisterOperationInput {
  pub canister_id: Principal,
  pub snapshot_id: String,
}
#[derive(CandidType, Deserialize)]
pub struct RestoreExternalCanisterOperation {
  pub input: RestoreExternalCanisterOperationInput,
}
#[derive(CandidType, Deserialize)]
pub struct AddAccountOperationInput {
  pub configs_request_policy: Option<Box<RequestPolicyRule>>,
  pub read_permission: Allow,
  pub configs_permission: Allow,
  pub metadata: Vec<AccountMetadata>,
  pub name: String,
  pub assets: Vec<Uuid>,
  pub transfer_request_policy: Option<Box<RequestPolicyRule>>,
  pub transfer_permission: Allow,
}
#[derive(CandidType, Deserialize)]
pub struct AddAccountOperation {
  pub account: Option<Account>,
  pub input: AddAccountOperationInput,
}
#[derive(CandidType, Deserialize)]
pub enum RequestOperation {
  RemoveAsset(RemoveAssetOperation),
  AddUserGroup(AddUserGroupOperation),
  EditPermission(EditPermissionOperation),
  SnapshotExternalCanister(SnapshotExternalCanisterOperation),
  PruneExternalCanister(PruneExternalCanisterOperation),
  EditNamedRule(EditNamedRuleOperation),
  ConfigureExternalCanister(ConfigureExternalCanisterOperation),
  ChangeExternalCanister(ChangeExternalCanisterOperation),
  MonitorExternalCanister(MonitorExternalCanisterOperation),
  AddUser(AddUserOperation),
  EditAsset(EditAssetOperation),
  EditUserGroup(EditUserGroupOperation),
  SetDisasterRecovery(SetDisasterRecoveryOperation),
  EditRequestPolicy(EditRequestPolicyOperation),
  RemoveRequestPolicy(RemoveRequestPolicyOperation),
  AddAsset(AddAssetOperation),
  SystemUpgrade(SystemUpgradeOperation),
  RemoveAddressBookEntry(RemoveAddressBookEntryOperation),
  CreateExternalCanister(CreateExternalCanisterOperation),
  EditAddressBookEntry(EditAddressBookEntryOperation),
  FundExternalCanister(FundExternalCanisterOperation),
  EditUser(EditUserOperation),
  ManageSystemInfo(ManageSystemInfoOperation),
  Transfer(TransferOperation),
  EditAccount(EditAccountOperation),
  AddAddressBookEntry(AddAddressBookEntryOperation),
  AddRequestPolicy(AddRequestPolicyOperation),
  RemoveNamedRule(RemoveNamedRuleOperation),
  RemoveUserGroup(RemoveUserGroupOperation),
  CallExternalCanister(CallExternalCanisterOperation),
  AddNamedRule(AddNamedRuleOperation),
  RestoreExternalCanister(RestoreExternalCanisterOperation),
  AddAccount(AddAccountOperation),
}
#[derive(CandidType, Deserialize)]
pub enum RequestApprovalStatus { Approved, Rejected }
#[derive(CandidType, Deserialize)]
pub struct RequestApproval {
  pub status: RequestApprovalStatus,
  pub approver_id: Uuid,
  pub status_reason: Option<String>,
  pub decided_at: TimestampRfc3339,
}
#[derive(CandidType, Deserialize)]
pub struct Request {
  pub id: Uuid,
  pub status: RequestStatus,
  pub title: String,
  pub execution_plan: RequestExecutionSchedule,
  pub expiration_dt: TimestampRfc3339,
  pub created_at: TimestampRfc3339,
  pub requested_by: Uuid,
  pub summary: Option<String>,
  pub operation: RequestOperation,
  pub approvals: Vec<RequestApproval>,
}
#[derive(CandidType, Deserialize)]
pub struct CancelRequestResultOk { pub request: Request }
#[derive(CandidType, Deserialize)]
pub struct Error {
  pub code: String,
  pub message: Option<String>,
  pub details: Option<Vec<(String,String,)>>,
}
pub type CancelRequestResult = std::result::Result<
  CancelRequestResultOk, Error
>;
#[derive(CandidType, Deserialize)]
pub struct CanisterSnapshotsInput { pub canister_id: Principal }
#[derive(CandidType, Deserialize)]
pub struct CanisterSnapshotsResponseItem {
  pub total_size: u64,
  pub taken_at_timestamp: TimestampRfc3339,
  pub snapshot_id: String,
}
pub type CanisterSnapshotsResponse = Vec<CanisterSnapshotsResponseItem>;
pub type CanisterSnapshotsResult = std::result::Result<
  CanisterSnapshotsResponse, Error
>;
#[derive(CandidType, Deserialize)]
pub struct CanisterStatusInput { pub canister_id: Principal }
#[derive(CandidType, Deserialize)]
pub enum CanisterStatusResponseStatus {
  #[serde(rename="stopped")]
  Stopped,
  #[serde(rename="stopping")]
  Stopping,
  #[serde(rename="running")]
  Running,
}
#[derive(CandidType, Deserialize)]
pub struct DefiniteCanisterSettings {
  pub freezing_threshold: candid::Nat,
  pub controllers: Vec<Principal>,
  pub reserved_cycles_limit: candid::Nat,
  pub log_visibility: LogVisibility,
  pub wasm_memory_limit: candid::Nat,
  pub memory_allocation: candid::Nat,
  pub compute_allocation: candid::Nat,
}
#[derive(CandidType, Deserialize)]
pub struct CanisterStatusResponseQueryStats {
  pub response_payload_bytes_total: candid::Nat,
  pub num_instructions_total: candid::Nat,
  pub num_calls_total: candid::Nat,
  pub request_payload_bytes_total: candid::Nat,
}
#[derive(CandidType, Deserialize)]
pub struct CanisterStatusResponse {
  pub status: CanisterStatusResponseStatus,
  pub memory_size: candid::Nat,
  pub cycles: candid::Nat,
  pub settings: DefiniteCanisterSettings,
  pub query_stats: CanisterStatusResponseQueryStats,
  pub idle_cycles_burned_per_day: candid::Nat,
  pub module_hash: Option<serde_bytes::ByteBuf>,
  pub reserved_cycles: candid::Nat,
}
pub type CanisterStatusResult = std::result::Result<
  CanisterStatusResponse, Error
>;
#[derive(CandidType, Deserialize)]
pub struct StandardData {
  pub supported_operations: Vec<String>,
  pub supported_address_formats: Vec<String>,
  pub required_metadata_fields: Vec<String>,
  pub standard: String,
}
#[derive(CandidType, Deserialize)]
pub struct SupportedBlockchain {
  pub blockchain: String,
  pub supported_standards: Vec<StandardData>,
}
#[derive(CandidType, Deserialize)]
pub struct Capabilities {
  pub name: String,
  pub version: String,
  pub supported_assets: Vec<Asset>,
  pub supported_blockchains: Vec<SupportedBlockchain>,
}
#[derive(CandidType, Deserialize)]
pub struct CapabilitiesResultOk { pub capabilities: Capabilities }
pub type CapabilitiesResult = std::result::Result<CapabilitiesResultOk, Error>;
#[derive(CandidType, Deserialize)]
pub struct WasmModuleExtraChunks {
  pub wasm_module_hash: serde_bytes::ByteBuf,
  pub store_canister: Principal,
  pub extra_chunks_key: String,
}
#[derive(CandidType, Deserialize)]
pub struct ChangeExternalCanisterOperationInput {
  pub arg: Option<serde_bytes::ByteBuf>,
  pub module_extra_chunks: Option<WasmModuleExtraChunks>,
  pub mode: CanisterInstallMode,
  pub canister_id: Principal,
  pub module: serde_bytes::ByteBuf,
}
#[derive(CandidType, Deserialize)]
pub struct SetDisasterRecoveryOperationInput {
  pub committee: Option<DisasterRecoveryCommittee>,
}
#[derive(CandidType, Deserialize)]
pub struct SystemUpgradeOperationInput {
  pub arg: Option<serde_bytes::ByteBuf>,
  pub module_extra_chunks: Option<WasmModuleExtraChunks>,
  pub target: SystemUpgradeTarget,
  pub module: serde_bytes::ByteBuf,
}
#[derive(CandidType, Deserialize)]
pub struct CallExternalCanisterOperationInput {
  pub arg: Option<serde_bytes::ByteBuf>,
  pub execution_method: CanisterMethod,
  pub validation_method: Option<CanisterMethod>,
  pub execution_method_cycles: Option<u64>,
}
#[derive(CandidType, Deserialize)]
pub enum RequestOperationInput {
  RemoveAsset(RemoveAssetOperationInput),
  AddUserGroup(AddUserGroupOperationInput),
  EditPermission(EditPermissionOperationInput),
  SnapshotExternalCanister(SnapshotExternalCanisterOperationInput),
  PruneExternalCanister(PruneExternalCanisterOperationInput),
  EditNamedRule(EditNamedRuleOperationInput),
  ConfigureExternalCanister(ConfigureExternalCanisterOperationInput),
  ChangeExternalCanister(ChangeExternalCanisterOperationInput),
  MonitorExternalCanister(MonitorExternalCanisterOperationInput),
  AddUser(AddUserOperationInput),
  EditAsset(EditAssetOperationInput),
  EditUserGroup(EditUserGroupOperationInput),
  SetDisasterRecovery(SetDisasterRecoveryOperationInput),
  EditRequestPolicy(EditRequestPolicyOperationInput),
  RemoveRequestPolicy(RemoveRequestPolicyOperationInput),
  AddAsset(AddAssetOperationInput),
  SystemUpgrade(SystemUpgradeOperationInput),
  RemoveAddressBookEntry(RemoveAddressBookEntryOperationInput),
  CreateExternalCanister(CreateExternalCanisterOperationInput),
  EditAddressBookEntry(EditAddressBookEntryOperationInput),
  FundExternalCanister(FundExternalCanisterOperationInput),
  EditUser(EditUserOperationInput),
  ManageSystemInfo(ManageSystemInfoOperationInput),
  Transfer(TransferOperationInput),
  EditAccount(EditAccountOperationInput),
  AddAddressBookEntry(AddAddressBookEntryOperationInput),
  AddRequestPolicy(AddRequestPolicyOperationInput),
  RemoveNamedRule(RemoveNamedRuleOperationInput),
  RemoveUserGroup(RemoveUserGroupOperationInput),
  CallExternalCanister(CallExternalCanisterOperationInput),
  AddNamedRule(AddNamedRuleOperationInput),
  RestoreExternalCanister(RestoreExternalCanisterOperationInput),
  AddAccount(AddAccountOperationInput),
}
#[derive(CandidType, Deserialize)]
pub struct CreateRequestInput {
  pub title: Option<String>,
  pub execution_plan: Option<RequestExecutionSchedule>,
  pub expiration_dt: Option<TimestampRfc3339>,
  pub summary: Option<String>,
  pub operation: RequestOperationInput,
}
#[derive(CandidType, Deserialize)]
pub struct RequestCallerPrivileges { pub id: Uuid, pub can_approve: bool }
#[derive(CandidType, Deserialize)]
pub enum EvaluationStatus { Approved, Rejected, Pending }
#[derive(CandidType, Deserialize)]
pub enum EvaluationSummaryReason {
  AllowList,
  AllowListMetadata,
  AutoApproved,
  ApprovalQuorum,
}
#[derive(CandidType, Deserialize)]
pub enum EvaluatedRequestPolicyRule {
  Not(Box<RequestPolicyRuleResult>),
  Quorum{
    total_possible_approvers: u64,
    min_approved: u64,
    approvers: Vec<Uuid>,
  },
  AllowListed,
  QuorumPercentage{
    total_possible_approvers: u64,
    min_approved: u64,
    approvers: Vec<Uuid>,
  },
  AutoApproved,
  AllOf(Vec<Box<RequestPolicyRuleResult>>),
  AnyOf(Vec<Box<RequestPolicyRuleResult>>),
  AllowListedByMetadata{ metadata: AddressBookMetadata },
}
#[derive(CandidType, Deserialize)]
pub struct RequestPolicyRuleResult {
  pub status: EvaluationStatus,
  pub evaluated_rule: EvaluatedRequestPolicyRule,
}
#[derive(CandidType, Deserialize)]
pub struct RequestEvaluationResult {
  pub request_id: Uuid,
  pub status: EvaluationStatus,
  pub result_reasons: Option<Vec<EvaluationSummaryReason>>,
  pub policy_results: Vec<Box<RequestPolicyRuleResult>>,
}
#[derive(CandidType, Deserialize)]
pub struct DisplayUser { pub id: Uuid, pub name: String }
#[derive(CandidType, Deserialize)]
pub struct RequestAdditionalInfo {
  pub id: Uuid,
  pub evaluation_result: Option<RequestEvaluationResult>,
  pub requester_name: String,
  pub approvers: Vec<DisplayUser>,
}
#[derive(CandidType, Deserialize)]
pub struct CreateRequestResultOk {
  pub privileges: RequestCallerPrivileges,
  pub request: Request,
  pub additional_info: RequestAdditionalInfo,
}
pub type CreateRequestResult = std::result::Result<
  CreateRequestResultOk, Error
>;
#[derive(CandidType, Deserialize)]
pub struct FetchAccountBalancesInput { pub account_ids: Vec<Uuid> }
#[derive(CandidType, Deserialize)]
pub struct FetchAccountBalancesResultOk {
  pub balances: Vec<Option<AccountBalance>>,
}
pub type FetchAccountBalancesResult = std::result::Result<
  FetchAccountBalancesResultOk, Error
>;
#[derive(CandidType, Deserialize)]
pub struct GetAccountInput { pub account_id: Uuid }
#[derive(CandidType, Deserialize)]
pub struct AccountCallerPrivileges {
  pub id: Uuid,
  pub can_transfer: bool,
  pub can_edit: bool,
}
#[derive(CandidType, Deserialize)]
pub struct GetAccountResultOk {
  pub privileges: AccountCallerPrivileges,
  pub account: Account,
}
pub type GetAccountResult = std::result::Result<GetAccountResultOk, Error>;
#[derive(CandidType, Deserialize)]
pub struct GetAddressBookEntryInput { pub address_book_entry_id: Uuid }
#[derive(CandidType, Deserialize)]
pub struct AddressBookEntryCallerPrivileges {
  pub id: Uuid,
  pub can_delete: bool,
  pub can_edit: bool,
}
#[derive(CandidType, Deserialize)]
pub struct GetAddressBookEntryResultOk {
  pub privileges: AddressBookEntryCallerPrivileges,
  pub address_book_entry: AddressBookEntry,
}
pub type GetAddressBookEntryResult = std::result::Result<
  GetAddressBookEntryResultOk, Error
>;
#[derive(CandidType, Deserialize)]
pub struct GetAssetInput { pub asset_id: Uuid }
#[derive(CandidType, Deserialize)]
pub struct AssetCallerPrivileges {
  pub id: Uuid,
  pub can_delete: bool,
  pub can_edit: bool,
}
#[derive(CandidType, Deserialize)]
pub struct GetAssetResultOk {
  pub privileges: AssetCallerPrivileges,
  pub asset: Asset,
}
pub type GetAssetResult = std::result::Result<GetAssetResultOk, Error>;
#[derive(CandidType, Deserialize)]
pub struct GetExternalCanisterInput { pub canister_id: Principal }
#[derive(CandidType, Deserialize)]
pub struct ExternalCanisterCallerMethodsPrivileges {
  pub execution_method: String,
  pub validation_method: ValidationMethodResourceTarget,
}
#[derive(CandidType, Deserialize)]
pub struct ExternalCanisterCallerPrivileges {
  pub id: Uuid,
  pub can_change: bool,
  pub canister_id: Principal,
  pub can_call: Vec<ExternalCanisterCallerMethodsPrivileges>,
  pub can_fund: bool,
}
#[derive(CandidType, Deserialize)]
pub struct ExternalCanisterCallRequestPolicyRule {
  pub execution_method: String,
  pub rule: Box<RequestPolicyRule>,
  pub validation_method: ValidationMethodResourceTarget,
  pub policy_id: Uuid,
}
#[derive(CandidType, Deserialize)]
pub struct ExternalCanisterChangeRequestPolicyRule {
  pub rule: Box<RequestPolicyRule>,
  pub policy_id: Uuid,
}
#[derive(CandidType, Deserialize)]
pub struct ExternalCanisterRequestPolicies {
  pub calls: Vec<ExternalCanisterCallRequestPolicyRule>,
  pub change: Vec<ExternalCanisterChangeRequestPolicyRule>,
}
#[derive(CandidType, Deserialize)]
pub struct ExternalCanister {
  pub id: Uuid,
  pub permissions: ExternalCanisterPermissions,
  pub modified_at: Option<TimestampRfc3339>,
  pub metadata: Vec<ExternalCanisterMetadata>,
  pub name: String,
  pub labels: Vec<String>,
  pub canister_id: Principal,
  pub description: Option<String>,
  pub created_at: TimestampRfc3339,
  pub request_policies: ExternalCanisterRequestPolicies,
  pub state: ExternalCanisterState,
  pub monitoring: Option<MonitorExternalCanisterStartInput>,
}
#[derive(CandidType, Deserialize)]
pub struct GetExternalCanisterResultOk {
  pub privileges: ExternalCanisterCallerPrivileges,
  pub canister: ExternalCanister,
}
pub type GetExternalCanisterResult = std::result::Result<
  GetExternalCanisterResultOk, Error
>;
#[derive(CandidType, Deserialize)]
pub struct GetExternalCanisterFiltersInputWithNameInner {
  pub prefix: Option<String>,
}
#[derive(CandidType, Deserialize)]
pub struct GetExternalCanisterFiltersInput {
  pub with_labels: Option<bool>,
  pub with_name: Option<GetExternalCanisterFiltersInputWithNameInner>,
}
#[derive(CandidType, Deserialize)]
pub struct GetExternalCanisterFiltersResultOkNamesInnerItem {
  pub name: String,
  pub canister_id: Principal,
}
#[derive(CandidType, Deserialize)]
pub struct GetExternalCanisterFiltersResultOk {
  pub labels: Option<Vec<String>>,
  pub names: Option<Vec<GetExternalCanisterFiltersResultOkNamesInnerItem>>,
}
pub type GetExternalCanisterFiltersResult = std::result::Result<
  GetExternalCanisterFiltersResultOk, Error
>;
#[derive(CandidType, Deserialize)]
pub struct GetNamedRuleInput { pub named_rule_id: Uuid }
#[derive(CandidType, Deserialize)]
pub struct NamedRuleCallerPrivileges {
  pub id: Uuid,
  pub can_delete: bool,
  pub can_edit: bool,
}
#[derive(CandidType, Deserialize)]
pub struct GetNamedRuleResultOk {
  pub privileges: NamedRuleCallerPrivileges,
  pub named_rule: NamedRule,
}
pub type GetNamedRuleResult = std::result::Result<GetNamedRuleResultOk, Error>;
#[derive(CandidType, Deserialize)]
pub enum SortByDirection { Asc, Desc }
#[derive(CandidType, Deserialize)]
pub enum ListRequestsSortBy {
  ExpirationDt(SortByDirection),
  LastModificationDt(SortByDirection),
  CreatedAt(SortByDirection),
}
#[derive(CandidType, Deserialize)]
pub enum ListRequestsOperationType {
  RemoveAsset,
  AddUserGroup,
  EditPermission,
  SnapshotExternalCanister(Option<Principal>),
  PruneExternalCanister(Option<Principal>),
  EditNamedRule,
  ConfigureExternalCanister(Option<Principal>),
  ChangeExternalCanister(Option<Principal>),
  MonitorExternalCanister(Option<Principal>),
  AddUser,
  EditAsset,
  EditUserGroup,
  SetDisasterRecovery,
  EditRequestPolicy,
  RemoveRequestPolicy,
  AddAsset,
  SystemUpgrade,
  RemoveAddressBookEntry,
  CreateExternalCanister,
  EditAddressBookEntry,
  FundExternalCanister(Option<Principal>),
  EditUser,
  ManageSystemInfo,
  Transfer(Option<Uuid>),
  EditAccount,
  AddAddressBookEntry,
  AddRequestPolicy,
  RemoveNamedRule,
  RemoveUserGroup,
  CallExternalCanister(Option<Principal>),
  AddNamedRule,
  RestoreExternalCanister(Option<Principal>),
  AddAccount,
}
#[derive(CandidType, Deserialize)]
pub struct GetNextApprovableRequestInput {
  pub sort_by: Option<ListRequestsSortBy>,
  pub excluded_request_ids: Vec<Uuid>,
  pub operation_types: Option<Vec<ListRequestsOperationType>>,
}
#[derive(CandidType, Deserialize)]
pub struct GetRequestResultData {
  pub privileges: RequestCallerPrivileges,
  pub request: Request,
  pub additional_info: RequestAdditionalInfo,
}
pub type GetNextApprovableRequestResult = std::result::Result<
  Option<GetRequestResultData>, Error
>;
#[derive(CandidType, Deserialize)]
pub struct GetPermissionInput { pub resource: Resource }
#[derive(CandidType, Deserialize)]
pub struct Permission { pub resource: Resource, pub allow: Allow }
#[derive(CandidType, Deserialize)]
pub struct PermissionCallerPrivileges {
  pub resource: Resource,
  pub can_edit: bool,
}
#[derive(CandidType, Deserialize)]
pub struct GetPermissionResultOk {
  pub permission: Permission,
  pub privileges: PermissionCallerPrivileges,
}
pub type GetPermissionResult = std::result::Result<
  GetPermissionResultOk, Error
>;
#[derive(CandidType, Deserialize)]
pub struct GetRequestInput {
  pub request_id: Uuid,
  pub with_full_info: Option<bool>,
}
pub type GetRequestResult = std::result::Result<GetRequestResultData, Error>;
#[derive(CandidType, Deserialize)]
pub struct GetRequestPolicyInput { pub id: Uuid }
#[derive(CandidType, Deserialize)]
pub struct RequestPolicyCallerPrivileges {
  pub id: Uuid,
  pub can_delete: bool,
  pub can_edit: bool,
}
#[derive(CandidType, Deserialize)]
pub struct RequestPolicy {
  pub id: Uuid,
  pub rule: Box<RequestPolicyRule>,
  pub specifier: RequestSpecifier,
}
#[derive(CandidType, Deserialize)]
pub struct GetRequestPolicyResultOk {
  pub privileges: RequestPolicyCallerPrivileges,
  pub policy: RequestPolicy,
}
pub type GetRequestPolicyResult = std::result::Result<
  GetRequestPolicyResultOk, Error
>;
#[derive(CandidType, Deserialize)]
pub struct GetTransfersInput { pub transfer_ids: Vec<Uuid> }
#[derive(CandidType, Deserialize)]
pub enum TransferStatus {
  Failed{ reason: String },
  Processing{ started_at: TimestampRfc3339 },
  Created,
  Completed{
    signature: Option<String>,
    hash: Option<String>,
    completed_at: TimestampRfc3339,
  },
}
#[derive(CandidType, Deserialize)]
pub struct Transfer {
  pub id: Uuid,
  pub to: String,
  pub fee: candid::Nat,
  pub request_id: Uuid,
  pub status: TransferStatus,
  pub from_account_id: Uuid,
  pub metadata: Vec<TransferMetadata>,
  pub network: Network,
  pub amount: candid::Nat,
}
#[derive(CandidType, Deserialize)]
pub struct GetTransfersResultOk { pub transfers: Vec<Transfer> }
pub type GetTransfersResult = std::result::Result<GetTransfersResultOk, Error>;
#[derive(CandidType, Deserialize)]
pub struct GetUserInput { pub user_id: Uuid }
#[derive(CandidType, Deserialize)]
pub struct UserCallerPrivileges { pub id: Uuid, pub can_edit: bool }
#[derive(CandidType, Deserialize)]
pub struct GetUserResultOk {
  pub privileges: UserCallerPrivileges,
  pub user: User,
}
pub type GetUserResult = std::result::Result<GetUserResultOk, Error>;
#[derive(CandidType, Deserialize)]
pub struct GetUserGroupInput { pub user_group_id: Uuid }
#[derive(CandidType, Deserialize)]
pub struct UserGroupCallerPrivileges {
  pub id: Uuid,
  pub can_delete: bool,
  pub can_edit: bool,
}
#[derive(CandidType, Deserialize)]
pub struct GetUserGroupResultOk {
  pub privileges: UserGroupCallerPrivileges,
  pub user_group: UserGroup,
}
pub type GetUserGroupResult = std::result::Result<GetUserGroupResultOk, Error>;
#[derive(CandidType, Deserialize)]
pub enum HealthStatus { Healthy, Uninitialized }
#[derive(CandidType, Deserialize)]
pub struct HeaderField (pub String,pub String,);
#[derive(CandidType, Deserialize)]
pub struct HttpRequest {
  pub url: String,
  pub method: String,
  pub body: serde_bytes::ByteBuf,
  pub headers: Vec<HeaderField>,
}
#[derive(CandidType, Deserialize)]
pub struct HttpResponse {
  pub body: serde_bytes::ByteBuf,
  pub headers: Vec<HeaderField>,
  pub status_code: u16,
}
#[derive(CandidType, Deserialize)]
pub enum TransferStatusType { Failed, Processing, Created, Completed }
#[derive(CandidType, Deserialize)]
pub struct ListAccountTransfersInput {
  pub account_id: Uuid,
  pub status: Option<TransferStatusType>,
  pub to_dt: Option<TimestampRfc3339>,
  pub from_dt: Option<TimestampRfc3339>,
}
#[derive(CandidType, Deserialize)]
pub struct TransferListItem {
  pub to: String,
  pub request_id: Uuid,
  pub status: TransferStatus,
  pub created_at: TimestampRfc3339,
  pub transfer_id: Uuid,
  pub amount: candid::Nat,
}
#[derive(CandidType, Deserialize)]
pub struct ListAccountTransfersResultOk { pub transfers: Vec<TransferListItem> }
pub type ListAccountTransfersResult = std::result::Result<
  ListAccountTransfersResultOk, Error
>;
#[derive(CandidType, Deserialize)]
pub struct PaginationInput { pub offset: Option<u64>, pub limit: Option<u16> }
#[derive(CandidType, Deserialize)]
pub struct ListAccountsInput {
  pub paginate: Option<PaginationInput>,
  pub search_term: Option<String>,
}
#[derive(CandidType, Deserialize)]
pub struct ListAccountsResultOk {
  pub total: u64,
  pub privileges: Vec<AccountCallerPrivileges>,
  pub accounts: Vec<Account>,
  pub next_offset: Option<u64>,
}
pub type ListAccountsResult = std::result::Result<ListAccountsResultOk, Error>;
#[derive(CandidType, Deserialize)]
pub struct ListAddressBookEntriesInput {
  pub ids: Option<Vec<Uuid>>,
  pub address_formats: Option<Vec<String>>,
  pub labels: Option<Vec<String>>,
  pub blockchain: Option<String>,
  pub addresses: Option<Vec<String>>,
  pub paginate: Option<PaginationInput>,
  pub search_term: Option<String>,
}
#[derive(CandidType, Deserialize)]
pub struct ListAddressBookEntriesResultOk {
  pub total: u64,
  pub privileges: Vec<AddressBookEntryCallerPrivileges>,
  pub address_book_entries: Vec<AddressBookEntry>,
  pub next_offset: Option<u64>,
}
pub type ListAddressBookEntriesResult = std::result::Result<
  ListAddressBookEntriesResultOk, Error
>;
#[derive(CandidType, Deserialize)]
pub struct ListAssetsInput { pub paginate: Option<PaginationInput> }
#[derive(CandidType, Deserialize)]
pub struct ListAssetsResultOk {
  pub total: u64,
  pub privileges: Vec<AssetCallerPrivileges>,
  pub assets: Vec<Asset>,
  pub next_offset: Option<u64>,
}
pub type ListAssetsResult = std::result::Result<ListAssetsResultOk, Error>;
#[derive(CandidType, Deserialize)]
pub enum ListExternalCanistersSortInput { Name(SortByDirection) }
#[derive(CandidType, Deserialize)]
pub struct ListExternalCanistersInput {
  pub sort_by: Option<ListExternalCanistersSortInput>,
  pub states: Option<Vec<ExternalCanisterState>>,
  pub canister_ids: Option<Vec<Principal>>,
  pub labels: Option<Vec<String>>,
  pub paginate: Option<PaginationInput>,
}
#[derive(CandidType, Deserialize)]
pub struct ListExternalCanistersResultOk {
  pub total: u64,
  pub privileges: Vec<ExternalCanisterCallerPrivileges>,
  pub canisters: Vec<ExternalCanister>,
  pub next_offset: Option<u64>,
}
pub type ListExternalCanistersResult = std::result::Result<
  ListExternalCanistersResultOk, Error
>;
#[derive(CandidType, Deserialize)]
pub struct ListNamedRulesInput { pub paginate: Option<PaginationInput> }
#[derive(CandidType, Deserialize)]
pub struct ListNamedRulesResultOk {
  pub total: u64,
  pub privileges: Vec<NamedRuleCallerPrivileges>,
  pub named_rules: Vec<NamedRule>,
  pub next_offset: Option<u64>,
}
pub type ListNamedRulesResult = std::result::Result<
  ListNamedRulesResultOk, Error
>;
#[derive(CandidType, Deserialize)]
pub enum NotificationStatus { Read, Sent }
#[derive(CandidType, Deserialize)]
pub enum NotificationTypeInput { RequestCreated, SystemMessage }
#[derive(CandidType, Deserialize)]
pub struct ListNotificationsInput {
  pub status: Option<NotificationStatus>,
  pub to_dt: Option<TimestampRfc3339>,
  pub from_dt: Option<TimestampRfc3339>,
  pub notification_type: Option<NotificationTypeInput>,
}
#[derive(CandidType, Deserialize)]
pub enum RequestOperationType {
  RemoveAsset,
  AddUserGroup,
  EditPermission,
  SnapshotExternalCanister,
  PruneExternalCanister,
  EditNamedRule,
  ConfigureExternalCanister,
  ChangeExternalCanister,
  MonitorExternalCanister,
  AddUser,
  EditAsset,
  EditUserGroup,
  SetDisasterRecovery,
  EditRequestPolicy,
  RemoveRequestPolicy,
  AddAsset,
  SystemUpgrade,
  RemoveAddressBookEntry,
  CreateExternalCanister,
  EditAddressBookEntry,
  FundExternalCanister,
  EditUser,
  ManageSystemInfo,
  Transfer,
  EditAccount,
  AddAddressBookEntry,
  AddRequestPolicy,
  RemoveNamedRule,
  RemoveUserGroup,
  CallExternalCanister,
  AddNamedRule,
  RestoreExternalCanister,
  AddAccount,
}
#[derive(CandidType, Deserialize)]
pub enum NotificationType {
  RequestCreated{
    account_id: Option<Uuid>,
    request_id: Uuid,
    operation_type: RequestOperationType,
    user_id: Option<Uuid>,
  },
  RequestRejected{
    request_id: Uuid,
    reasons: Option<Vec<EvaluationSummaryReason>>,
    operation_type: RequestOperationType,
  },
  SystemMessage,
  RequestFailed{
    request_id: Uuid,
    operation_type: RequestOperationType,
    reason: Option<String>,
  },
}
#[derive(CandidType, Deserialize)]
pub struct Notification {
  pub id: Uuid,
  pub status: NotificationStatus,
  pub title: String,
  pub created_at: TimestampRfc3339,
  pub notification_type: NotificationType,
  pub message: Option<String>,
  pub target_user_id: Uuid,
}
#[derive(CandidType, Deserialize)]
pub struct ListNotificationsResultOk { pub notifications: Vec<Notification> }
pub type ListNotificationsResult = std::result::Result<
  ListNotificationsResultOk, Error
>;
#[derive(CandidType, Deserialize)]
pub struct ListPermissionsInput {
  pub resources: Option<Vec<Resource>>,
  pub paginate: Option<PaginationInput>,
}
#[derive(CandidType, Deserialize)]
pub struct BasicUser { pub id: Uuid, pub status: UserStatus, pub name: String }
#[derive(CandidType, Deserialize)]
pub struct ListPermissionsResultOk {
  pub permissions: Vec<Permission>,
  pub total: u64,
  pub privileges: Vec<PermissionCallerPrivileges>,
  pub user_groups: Vec<UserGroup>,
  pub users: Vec<BasicUser>,
  pub next_offset: Option<u64>,
}
pub type ListPermissionsResult = std::result::Result<
  ListPermissionsResultOk, Error
>;
pub type ListRequestPoliciesInput = PaginationInput;
#[derive(CandidType, Deserialize)]
pub struct ListRequestPoliciesResultOk {
  pub total: u64,
  pub privileges: Vec<RequestPolicyCallerPrivileges>,
  pub next_offset: Option<u64>,
  pub policies: Vec<RequestPolicy>,
}
pub type ListRequestPoliciesResult = std::result::Result<
  ListRequestPoliciesResultOk, Error
>;
#[derive(CandidType, Deserialize)]
pub enum RequestStatusCode {
  Failed,
  Approved,
  Rejected,
  Scheduled,
  Cancelled,
  Processing,
  Created,
  Completed,
}
#[derive(CandidType, Deserialize)]
pub struct ListRequestsInput {
  pub sort_by: Option<ListRequestsSortBy>,
  pub with_evaluation_results: bool,
  pub expiration_from_dt: Option<TimestampRfc3339>,
  pub created_to_dt: Option<TimestampRfc3339>,
  pub statuses: Option<Vec<RequestStatusCode>>,
  pub approver_ids: Option<Vec<Uuid>>,
  pub expiration_to_dt: Option<TimestampRfc3339>,
  pub paginate: Option<PaginationInput>,
  pub requester_ids: Option<Vec<Uuid>>,
  pub operation_types: Option<Vec<ListRequestsOperationType>>,
  pub only_approvable: bool,
  pub created_from_dt: Option<TimestampRfc3339>,
}
#[derive(CandidType, Deserialize)]
pub struct ListRequestsResultOk {
  pub total: u64,
  pub privileges: Vec<RequestCallerPrivileges>,
  pub requests: Vec<Request>,
  pub next_offset: Option<u64>,
  pub additional_info: Vec<RequestAdditionalInfo>,
}
pub type ListRequestsResult = std::result::Result<ListRequestsResultOk, Error>;
#[derive(CandidType, Deserialize)]
pub struct ListUserGroupsInput {
  pub paginate: Option<PaginationInput>,
  pub search_term: Option<String>,
}
#[derive(CandidType, Deserialize)]
pub struct ListUserGroupsResultOk {
  pub total: u64,
  pub privileges: Vec<UserGroupCallerPrivileges>,
  pub user_groups: Vec<UserGroup>,
  pub next_offset: Option<u64>,
}
pub type ListUserGroupsResult = std::result::Result<
  ListUserGroupsResultOk, Error
>;
#[derive(CandidType, Deserialize)]
pub struct ListUsersInput {
  pub groups: Option<Vec<Uuid>>,
  pub statuses: Option<Vec<UserStatus>>,
  pub paginate: Option<PaginationInput>,
  pub search_term: Option<String>,
}
#[derive(CandidType, Deserialize)]
pub struct ListUsersResultOk {
  pub total: u64,
  pub privileges: Vec<UserCallerPrivileges>,
  pub users: Vec<User>,
  pub next_offset: Option<u64>,
}
pub type ListUsersResult = std::result::Result<ListUsersResultOk, Error>;
#[derive(CandidType, Deserialize)]
pub struct MarkNotificationsReadInput {
  pub notification_ids: Vec<Uuid>,
  pub read: bool,
}
pub type MarkNotificationReadResult = std::result::Result<(), Error>;
#[derive(CandidType, Deserialize)]
pub enum UserPrivilege {
  AddUserGroup,
  ListRequestPolicies,
  ListNamedRules,
  ListPermissions,
  ListUserGroups,
  AddUser,
  ListUsers,
  AddAsset,
  SystemUpgrade,
  CreateExternalCanister,
  ListAssets,
  ManageSystemInfo,
  AddAddressBookEntry,
  ListAccounts,
  AddRequestPolicy,
  ListAddressBookEntries,
  ListExternalCanisters,
  ListRequests,
  CallAnyExternalCanister,
  SystemInfo,
  AddNamedRule,
  Capabilities,
  AddAccount,
}
#[derive(CandidType, Deserialize)]
pub struct MeResultOk { pub me: User, pub privileges: Vec<UserPrivilege> }
pub type MeResult = std::result::Result<MeResultOk, Error>;
#[derive(CandidType, Deserialize)]
pub struct NotifyFailedStationUpgradeInput { pub reason: String }
pub type NotifyFailedStationUpgradeResult = std::result::Result<(), Error>;
#[derive(CandidType, Deserialize)]
pub struct SubmitRequestApprovalInput {
  pub request_id: Uuid,
  pub decision: RequestApprovalStatus,
  pub reason: Option<String>,
}
#[derive(CandidType, Deserialize)]
pub struct SubmitRequestApprovalResultOk {
  pub privileges: RequestCallerPrivileges,
  pub request: Request,
  pub additional_info: RequestAdditionalInfo,
}
pub type SubmitRequestApprovalResult = std::result::Result<
  SubmitRequestApprovalResultOk, Error
>;
#[derive(CandidType, Deserialize)]
pub struct DisasterRecovery {
  pub user_group_name: Option<String>,
  pub committee: DisasterRecoveryCommittee,
}
#[derive(CandidType, Deserialize)]
pub enum CycleObtainStrategy {
  Disabled,
  MintFromNativeToken{ account_id: Uuid, account_name: Option<String> },
  WithdrawFromCyclesLedger{ account_id: Uuid, account_name: Option<String> },
}
#[derive(CandidType, Deserialize)]
pub struct SystemInfo {
  pub disaster_recovery: Option<DisasterRecovery>,
  pub upgrader_cycles: Option<u64>,
  pub name: String,
  pub last_upgrade_timestamp: TimestampRfc3339,
  pub raw_rand_successful: bool,
  pub version: String,
  pub cycles: u64,
  pub upgrader_id: Principal,
  pub cycle_obtain_strategy: CycleObtainStrategy,
}
#[derive(CandidType, Deserialize)]
pub struct SystemInfoResultOk { pub system: SystemInfo }
pub type SystemInfoResult = std::result::Result<SystemInfoResultOk, Error>;

pub struct Service(pub Principal);
impl Service {
  pub async fn cancel_request(&self, arg0: &CancelRequestInput) -> Result<(CancelRequestResult,)> {
    ic_cdk::call(self.0, "cancel_request", (arg0,)).await
  }
  pub async fn canister_snapshots(&self, arg0: &CanisterSnapshotsInput) -> Result<(CanisterSnapshotsResult,)> {
    ic_cdk::call(self.0, "canister_snapshots", (arg0,)).await
  }
  pub async fn canister_status(&self, arg0: &CanisterStatusInput) -> Result<(CanisterStatusResult,)> {
    ic_cdk::call(self.0, "canister_status", (arg0,)).await
  }
  pub async fn capabilities(&self) -> Result<(CapabilitiesResult,)> {
    ic_cdk::call(self.0, "capabilities", ()).await
  }
  pub async fn create_request(&self, arg0: &CreateRequestInput) -> Result<(CreateRequestResult,)> {
    ic_cdk::call(self.0, "create_request", (arg0,)).await
  }
  pub async fn fetch_account_balances(&self, arg0: &FetchAccountBalancesInput) -> Result<(FetchAccountBalancesResult,)> {
    ic_cdk::call(self.0, "fetch_account_balances", (arg0,)).await
  }
  pub async fn get_account(&self, arg0: &GetAccountInput) -> Result<(GetAccountResult,)> {
    ic_cdk::call(self.0, "get_account", (arg0,)).await
  }
  pub async fn get_address_book_entry(&self, arg0: &GetAddressBookEntryInput) -> Result<(GetAddressBookEntryResult,)> {
    ic_cdk::call(self.0, "get_address_book_entry", (arg0,)).await
  }
  pub async fn get_asset(&self, arg0: &GetAssetInput) -> Result<(GetAssetResult,)> {
    ic_cdk::call(self.0, "get_asset", (arg0,)).await
  }
  pub async fn get_external_canister(&self, arg0: &GetExternalCanisterInput) -> Result<(GetExternalCanisterResult,)> {
    ic_cdk::call(self.0, "get_external_canister", (arg0,)).await
  }
  pub async fn get_external_canister_filters(&self, arg0: &GetExternalCanisterFiltersInput) -> Result<(GetExternalCanisterFiltersResult,)> {
    ic_cdk::call(self.0, "get_external_canister_filters", (arg0,)).await
  }
  pub async fn get_named_rule(&self, arg0: &GetNamedRuleInput) -> Result<(GetNamedRuleResult,)> {
    ic_cdk::call(self.0, "get_named_rule", (arg0,)).await
  }
  pub async fn get_next_approvable_request(&self, arg0: &GetNextApprovableRequestInput) -> Result<(GetNextApprovableRequestResult,)> {
    ic_cdk::call(self.0, "get_next_approvable_request", (arg0,)).await
  }
  pub async fn get_permission(&self, arg0: &GetPermissionInput) -> Result<(GetPermissionResult,)> {
    ic_cdk::call(self.0, "get_permission", (arg0,)).await
  }
  pub async fn get_request(&self, arg0: &GetRequestInput) -> Result<(GetRequestResult,)> {
    ic_cdk::call(self.0, "get_request", (arg0,)).await
  }
  pub async fn get_request_policy(&self, arg0: &GetRequestPolicyInput) -> Result<(GetRequestPolicyResult,)> {
    ic_cdk::call(self.0, "get_request_policy", (arg0,)).await
  }
  pub async fn get_transfers(&self, arg0: &GetTransfersInput) -> Result<(GetTransfersResult,)> {
    ic_cdk::call(self.0, "get_transfers", (arg0,)).await
  }
  pub async fn get_user(&self, arg0: &GetUserInput) -> Result<(GetUserResult,)> {
    ic_cdk::call(self.0, "get_user", (arg0,)).await
  }
  pub async fn get_user_group(&self, arg0: &GetUserGroupInput) -> Result<(GetUserGroupResult,)> {
    ic_cdk::call(self.0, "get_user_group", (arg0,)).await
  }
  pub async fn health_status(&self) -> Result<(HealthStatus,)> {
    ic_cdk::call(self.0, "health_status", ()).await
  }
  pub async fn http_request(&self, arg0: &HttpRequest) -> Result<(HttpResponse,)> {
    ic_cdk::call(self.0, "http_request", (arg0,)).await
  }
  pub async fn list_account_transfers(&self, arg0: &ListAccountTransfersInput) -> Result<(ListAccountTransfersResult,)> {
    ic_cdk::call(self.0, "list_account_transfers", (arg0,)).await
  }
  pub async fn list_accounts(&self, arg0: &ListAccountsInput) -> Result<(ListAccountsResult,)> {
    ic_cdk::call(self.0, "list_accounts", (arg0,)).await
  }
  pub async fn list_address_book_entries(&self, arg0: &ListAddressBookEntriesInput) -> Result<(ListAddressBookEntriesResult,)> {
    ic_cdk::call(self.0, "list_address_book_entries", (arg0,)).await
  }
  pub async fn list_assets(&self, arg0: &ListAssetsInput) -> Result<(ListAssetsResult,)> {
    ic_cdk::call(self.0, "list_assets", (arg0,)).await
  }
  pub async fn list_external_canisters(&self, arg0: &ListExternalCanistersInput) -> Result<(ListExternalCanistersResult,)> {
    ic_cdk::call(self.0, "list_external_canisters", (arg0,)).await
  }
  pub async fn list_named_rules(&self, arg0: &ListNamedRulesInput) -> Result<(ListNamedRulesResult,)> {
    ic_cdk::call(self.0, "list_named_rules", (arg0,)).await
  }
  pub async fn list_notifications(&self, arg0: &ListNotificationsInput) -> Result<(ListNotificationsResult,)> {
    ic_cdk::call(self.0, "list_notifications", (arg0,)).await
  }
  pub async fn list_permissions(&self, arg0: &ListPermissionsInput) -> Result<(ListPermissionsResult,)> {
    ic_cdk::call(self.0, "list_permissions", (arg0,)).await
  }
  pub async fn list_request_policies(&self, arg0: &ListRequestPoliciesInput) -> Result<(ListRequestPoliciesResult,)> {
    ic_cdk::call(self.0, "list_request_policies", (arg0,)).await
  }
  pub async fn list_requests(&self, arg0: &ListRequestsInput) -> Result<(ListRequestsResult,)> {
    ic_cdk::call(self.0, "list_requests", (arg0,)).await
  }
  pub async fn list_user_groups(&self, arg0: &ListUserGroupsInput) -> Result<(ListUserGroupsResult,)> {
    ic_cdk::call(self.0, "list_user_groups", (arg0,)).await
  }
  pub async fn list_users(&self, arg0: &ListUsersInput) -> Result<(ListUsersResult,)> {
    ic_cdk::call(self.0, "list_users", (arg0,)).await
  }
  pub async fn mark_notifications_read(&self, arg0: &MarkNotificationsReadInput) -> Result<(MarkNotificationReadResult,)> {
    ic_cdk::call(self.0, "mark_notifications_read", (arg0,)).await
  }
  pub async fn me(&self) -> Result<(MeResult,)> {
    ic_cdk::call(self.0, "me", ()).await
  }
  pub async fn notify_failed_station_upgrade(&self, arg0: &NotifyFailedStationUpgradeInput) -> Result<(NotifyFailedStationUpgradeResult,)> {
    ic_cdk::call(self.0, "notify_failed_station_upgrade", (arg0,)).await
  }
  pub async fn submit_request_approval(&self, arg0: &SubmitRequestApprovalInput) -> Result<(SubmitRequestApprovalResult,)> {
    ic_cdk::call(self.0, "submit_request_approval", (arg0,)).await
  }
  pub async fn system_info(&self) -> Result<(SystemInfoResult,)> {
    ic_cdk::call(self.0, "system_info", ()).await
  }
}
