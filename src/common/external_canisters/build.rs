use candid_parser::{
    bindings::rust::{compile, Config, ExternalConfig},
    configs::Configs,
    pretty_check_file,
};
use cargo_metadata::MetadataCommand;
use std::{
    fs,
    path::{Path, PathBuf},
    str::FromStr,
};

const ORBIT_STATION_PACKAGE_NAME: &str = "station-api";
const ORBIT_STATION_CANDID_SPEC_FILE_NAME: &str = "spec.did";

const SPEC_RUST_FILE_PATH: &str = "src/orbit_station/spec.rs";
const SPEC_RUST_FILE_HEADER: &str =
    "//! This file is automatically generated by the crate's `build.rs` script.\n\n";

/// Inspired from https://github.com/dfinity/candid/blob/30c388671462aecdc4a3a9753d50dc2e8208c200/tools/didc/src/main.rs#L237-L247
fn bindings_from_did_file(path: &Path) -> String {
    let (env, actor) = pretty_check_file(path).unwrap();
    let configs = Configs::from_str("").unwrap();
    let external = configs
        .get_subtable(&["didc".to_string(), "rust".to_string()])
        .map(|x| x.clone().try_into().unwrap())
        .unwrap_or(ExternalConfig::default());
    let config = Config::new(configs);
    let (res, _) = compile(&config, &env, &actor, external);
    res
}

fn main() {
    // Get metadata about all dependencies
    let metadata = MetadataCommand::new().exec().unwrap();

    // Find the station-api package
    let station_api = metadata
        .packages
        .iter()
        .find(|p| p.name == ORBIT_STATION_PACKAGE_NAME)
        .expect("station-api package not found");

    // Get the spec.did path
    let spec_path = station_api
        .manifest_path
        .parent()
        .unwrap()
        .join(ORBIT_STATION_CANDID_SPEC_FILE_NAME)
        .into_std_path_buf();

    // Get the output path for our generated Rust file
    let out_dir = PathBuf::from(env!("CARGO_MANIFEST_DIR")).join(SPEC_RUST_FILE_PATH);

    // Tell Cargo to rerun if the .did file changes
    println!("cargo:rerun-if-changed={}", spec_path.to_string_lossy());

    // Run didc command
    let output = bindings_from_did_file(&spec_path);

    // Write the output to our spec file
    let file_content = [SPEC_RUST_FILE_HEADER, &output].concat();
    fs::write(&out_dir, file_content).expect("Failed to write generated Rust file");
}
