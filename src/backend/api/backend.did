type Err = record {
  code : nat16;
  message : text;
};

type UserRole = variant {
  admin;
  user;
  unassigned;
};

type UserProfile = record {
  id : text;
  principal_id : principal;
  username : text;
  role : UserRole;
};

type GetMyUserProfileResponse = variant {
  ok : UserProfile;
  err : Err;
};

type CreateMyUserProfileResponse = variant {
  ok : UserProfile;
  err : Err;
};

type UpdateMyUserProfileRequest = record {
  username : opt text;
};

type UpdateMyUserProfileResponse = variant {
  ok;
  err : Err;
};

type UpdateUserProfileRequest = record {
  user_id : text;
  username : opt text;
  role : opt UserRole;
};

type UpdateUserProfileResponse = variant {
  ok;
  err : Err;
};

type DeleteUserProfileRequest = record {
  user_id : text;
};

type DeleteUserProfileResponse = variant {
  ok;
  err : Err;
};

type ListUsersResponse = variant {
  ok : vec UserProfile;
  err : Err;
};

type WheelAssetState = variant {
  enabled;
  disabled;
};

type WheelAssetTokenPrice = record {
  usd_price: float64;
  last_fetched_at: text;
};

type WheelAssetTokenBalance = record {
  balance: nat64;
  last_fetched_at: text;
};

type WheelAssetType = variant {
  token : record {
    ledger_canister_id : principal;
    exchange_rate_symbol : text;
    should_fetch_usd_price : bool;
    usd_price : opt WheelAssetTokenPrice;
    decimals : nat8;
    balance : opt WheelAssetTokenBalance;
  };
  gadget;
  jackpot;
};

type WheelAsset = record {
  id : text;
  name : text;
  asset_type : WheelAssetType;
  total_amount : nat32;
  used_amount : nat32;
  state : WheelAssetState;
};

type ListWheelAssetsRequest = record {
  state : opt WheelAssetState;
};

type ListWheelAssetsResponse = variant {
  ok : vec WheelAsset;
  err : Err;
};

type SetDefaultWheelAssetsResponse = variant {
  ok;
  err : Err;
};

type FetchTokensDataResponse = variant {
  ok;
  err : Err;
};

service : {
  get_my_user_profile : () -> (GetMyUserProfileResponse) query;
  create_my_user_profile : () -> (CreateMyUserProfileResponse);
  update_my_user_profile : (UpdateMyUserProfileRequest) -> (UpdateMyUserProfileResponse);
  update_user_profile: (UpdateUserProfileRequest) -> (UpdateMyUserProfileResponse);
  delete_user_profile: (DeleteUserProfileRequest) -> (DeleteUserProfileResponse);
  list_users: () -> (ListUsersResponse) query;

  list_wheel_assets: (ListWheelAssetsRequest) -> (ListWheelAssetsResponse) query;
  set_default_wheel_assets: () -> (SetDefaultWheelAssetsResponse);
  fetch_tokens_data: () -> (FetchTokensDataResponse);
}
