type Err = record {
  code : nat16;
  message : text;
};

type UserRole = variant {
  admin;
  scanner;
  unassigned;
};

type UserProfile = record {
  id : text;
  principal_id : principal;
  username : text;
  role : UserRole;
};

type GetMyUserProfileResponse = variant {
  ok : UserProfile;
  err : Err;
};

type CreateMyUserProfileResponse = variant {
  ok : UserProfile;
  err : Err;
};

type UpdateMyUserProfileRequest = record {
  username : opt text;
};

type UpdateMyUserProfileResponse = variant {
  ok;
  err : Err;
};

type UpdateUserProfileRequest = record {
  user_id : text;
  username : opt text;
  role : opt UserRole;
};

type UpdateUserProfileResponse = variant {
  ok;
  err : Err;
};

type DeleteUserProfileRequest = record {
  user_id : text;
};

type DeleteUserProfileResponse = variant {
  ok;
  err : Err;
};

type ListUsersResponse = variant {
  ok : vec UserProfile;
  err : Err;
};

type WheelAssetState = variant {
  enabled;
  disabled;
};

type WheelAssetTokenPrice = record {
  usd_price: float64;
  last_fetched_at: text;
};

type WheelAssetTokenBalance = record {
  balance: nat;
  last_fetched_at: text;
};

type WheelAssetTokenLedgerConfig = record {
  ledger_canister_id : principal;
  decimals : nat8;
};

type WheelAssetType = variant {
  token : record {
    ledger_config : WheelAssetTokenLedgerConfig;
    exchange_rate_symbol : opt text;
    usd_price : opt WheelAssetTokenPrice;
    balance : opt WheelAssetTokenBalance;
    prize_usd_amount : float64;
    available_draws_count : nat32;
  };
  gadget : record {
    article_type : opt text;
  };
  jackpot : record {
    wheel_asset_ids : vec text;
  };
};

type WheelAssetUiSettings = record {
  background_color_hex : text;
};

type WheelAsset = record {
  id : text;
  name : text;
  asset_type : WheelAssetType;
  total_amount : nat32;
  used_amount : nat32;
  available_amount : nat32;
  wheel_image_path : opt text;
  modal_image_path : opt text;
  state : WheelAssetState;
  wheel_ui_settings : WheelAssetUiSettings;
};

type ListWheelAssetsRequest = record {
  state : opt WheelAssetState;
};

type ListWheelAssetsResponse = variant {
  ok : vec WheelAsset;
  err : Err;
};

type SetDefaultWheelAssetsResponse = variant {
  ok;
  err : Err;
};

type FetchTokensDataResponse = variant {
  ok;
  err : Err;
};

type CreateWheelAssetTypeConfig = variant {
  token : record {
    ledger_config : WheelAssetTokenLedgerConfig;
    exchange_rate_symbol : opt text;
    prize_usd_amount : float64;
  };
  gadget : record {
    article_type : opt text;
  };
  jackpot : record {
    wheel_asset_ids : vec text;
  };
};

type CreateWheelAssetRequest = record {
  name : text;
  asset_type_config : CreateWheelAssetTypeConfig;
  total_amount : nat32;
  wheel_ui_settings : opt WheelAssetUiSettings;
};

type CreateWheelAssetResponse = variant {
  ok : WheelAsset;
  err : Err;
};

type UpdateWheelAssetTypeLedgerConfig = record {
  decimals : opt nat8;
};

type UpdateWheelAssetTypeConfig = variant {
  token : record {
    exchange_rate_symbol : opt text;
    prize_usd_amount : opt float64;
    ledger_config : opt UpdateWheelAssetTypeLedgerConfig;
  };
  gadget : record {
    article_type : opt text;
  };
  jackpot : record {
    wheel_asset_ids : vec text;
  };
};

type UpdateWheelAssetRequest = record {
  id : text;
  name : opt text;
  total_amount : opt nat32;
  used_amount : opt nat32;
  state : opt WheelAssetState;
  asset_type_config : opt UpdateWheelAssetTypeConfig;
  wheel_ui_settings : opt WheelAssetUiSettings;
};

type UpdateWheelAssetResponse = variant {
  ok;
  err : Err;
};

type DeleteWheelAssetRequest = record {
  id : text;
};

type DeleteWheelAssetResponse = variant {
  ok;
  err : Err;
};

type UpdateWheelAssetImageConfig = variant {
  wheel : record {
    content_type : text;
    content_bytes : blob;
  };
  modal : record {
    content_type : text;
    content_bytes : blob;
  };
};

type UpdateWheelAssetImageRequest = record {
  id : text;
  image_config : UpdateWheelAssetImageConfig;
};

type UpdateWheelAssetImageResponse = variant {
  ok;
  err : Err;
};

// A subset of WheelAsset that can be publicly exposed
type WheelPrize = record {
  wheel_asset_id : text;
  name : text;
  wheel_image_path : opt text;
  modal_image_path : opt text;
  wheel_ui_settings : WheelAssetUiSettings;
  prize_usd_amount : opt float64;
};

type ListWheelPrizesResponse = variant {
  ok : vec WheelPrize;
  err : Err;
};

type UpdateWheelPrizesOrderRequest = record {
  wheel_asset_ids : vec text;
};

type UpdateWheelPrizesOrderResponse = variant {
  ok;
  err : Err;
};

type WheelPrizeExtractionState = variant {
  processing;
  completed : record {
    prize_usd_amount: opt float64;
  };
  failed : record { error : Err };
};

type WheelPrizeExtraction = record {
  id : text;
  extracted_for_principal : principal;
  extracted_by_user_id : text;
  state : WheelPrizeExtractionState;
  wheel_asset_id : opt text;
  created_at : text;
  updated_at : text;
};

type GetWheelPrizeExtractionRequest = record {
  wheel_prize_extraction_id : text;
};

type GetWheelPrizeExtractionResponse = variant {
  ok : WheelPrizeExtraction;
  err : Err;
};

type GetLastWheelPrizeExtractionResponse = variant {
  ok : opt WheelPrizeExtraction;
  err : Err;
};

type ListWheelPrizeExtractionsResponse = variant {
  ok : vec WheelPrizeExtraction;
  err : Err;
};

type CreateWheelPrizeExtractionRequest = record {
  extract_for_principal : principal;
};

type CreateWheelPrizeExtractionResponse = variant {
  ok;
  err : Err;
};

type TransferTokenRequest = record {
  ledger_canister_id : principal;
  to : principal;
  amount : nat;
};

type TransferTokenResponse = variant {
  ok : nat;
  err : Err;
};

type WheelPrizeExtractionsStats = record {
  total_completed_extractions : nat32;
  total_spent_usd : float64;
};

type GetWheelPrizeExtractionsStatsResponse = variant {
  ok : WheelPrizeExtractionsStats;
  err : Err;
};

type CustomDomainRecordBnRegistrationState = variant {
  not_started;
  pending : record {
    bn_registration_id : text;
  };
  registered : record {
    bn_registration_id : text;
  };
  failed : record {
    bn_registration_id : text;
    error_message : text;
  };
};

type CustomDomainRecord = record {
  id : text;
  domain_name : text;
  bn_registration_state : CustomDomainRecordBnRegistrationState;
  created_at : text;
  updated_at : text;
};

type CreateCustomDomainRecordRequest = record {
  domain_name : text;
};

type CreateCustomDomainRecordResponse = variant {
  ok : CustomDomainRecord;
  err : Err;
};

type UpdateCustomDomainRecordRequest = record {
  id : text;
  bn_registration_state : CustomDomainRecordBnRegistrationState;
};

type UpdateCustomDomainRecordResponse = variant {
  ok;
  err : Err;
};

type ListCustomDomainRecordsResponse = variant {
  ok : vec CustomDomainRecord;
  err : Err;
};

type DeleteCustomDomainRecordRequest = record {
  id : text;
};

type DeleteCustomDomainRecordResponse = variant {
  ok;
  err : Err;
};

// HTTP
type HeaderField = record { text; text };

type HttpRequest = record {
  method : text;
  url : text;
  headers : vec HeaderField;
  body : blob;
  certificate_version : opt nat16;
};

type HttpResponse = record {
  status_code : nat16;
  headers : vec HeaderField;
  body : blob;
};
// End HTTP

service : {
  get_my_user_profile : () -> (GetMyUserProfileResponse) query;
  create_my_user_profile : () -> (CreateMyUserProfileResponse);
  update_my_user_profile : (UpdateMyUserProfileRequest) -> (UpdateMyUserProfileResponse);
  update_user_profile: (UpdateUserProfileRequest) -> (UpdateMyUserProfileResponse);
  delete_user_profile: (DeleteUserProfileRequest) -> (DeleteUserProfileResponse);
  list_users: () -> (ListUsersResponse) query;

  list_wheel_assets: (ListWheelAssetsRequest) -> (ListWheelAssetsResponse) query;
  set_default_wheel_assets: () -> (SetDefaultWheelAssetsResponse);
  fetch_tokens_data: () -> (FetchTokensDataResponse);
  create_wheel_asset: (CreateWheelAssetRequest) -> (CreateWheelAssetResponse);
  update_wheel_asset: (UpdateWheelAssetRequest) -> (UpdateWheelAssetResponse);
  delete_wheel_asset: (DeleteWheelAssetRequest) -> (DeleteWheelAssetResponse);
  update_wheel_asset_image: (UpdateWheelAssetImageRequest) -> (UpdateWheelAssetImageResponse);
  list_wheel_prizes: () -> (ListWheelPrizesResponse) query;
  update_wheel_prizes_order: (UpdateWheelPrizesOrderRequest) -> (UpdateWheelPrizesOrderResponse);

  get_wheel_prize_extraction: (GetWheelPrizeExtractionRequest) -> (GetWheelPrizeExtractionResponse) query;
  get_last_wheel_prize_extraction: () -> (GetLastWheelPrizeExtractionResponse) query;
  list_wheel_prize_extractions: () -> (ListWheelPrizeExtractionsResponse) query;
  create_wheel_prize_extraction: (CreateWheelPrizeExtractionRequest) -> (CreateWheelPrizeExtractionResponse);
  get_wheel_prize_extractions_stats: () -> (GetWheelPrizeExtractionsStatsResponse) query;

  transfer_token: (TransferTokenRequest) -> (TransferTokenResponse);

  create_custom_domain_record: (CreateCustomDomainRecordRequest) -> (CreateCustomDomainRecordResponse);
  update_custom_domain_record: (UpdateCustomDomainRecordRequest) -> (UpdateCustomDomainRecordResponse);
  delete_custom_domain_record: (DeleteCustomDomainRecordRequest) -> (DeleteCustomDomainRecordResponse);
  list_custom_domain_records: () -> (ListCustomDomainRecordsResponse) query;

  // HTTP
  http_request : (request : HttpRequest) -> (HttpResponse) query;
  // End HTTP
}
